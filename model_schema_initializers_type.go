/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaInitializersType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaInitializersType{}

// SchemaInitializersType Initializers tracks the progress of initialization of a configuration object
type SchemaInitializersType struct {
	//  Pending is a list of initializers that must execute in order before this object is initialized.  When the last pending initializer is removed, and no failing result is set, the initializers  struct will be set to nil and the object is considered as initialized and visible to all  clients.
	Pending []SchemaInitializerType `json:"pending,omitempty"`
	Result *SchemaStatusType `json:"result,omitempty"`
}

// NewSchemaInitializersType instantiates a new SchemaInitializersType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaInitializersType() *SchemaInitializersType {
	this := SchemaInitializersType{}
	return &this
}

// NewSchemaInitializersTypeWithDefaults instantiates a new SchemaInitializersType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaInitializersTypeWithDefaults() *SchemaInitializersType {
	this := SchemaInitializersType{}
	return &this
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *SchemaInitializersType) GetPending() []SchemaInitializerType {
	if o == nil || IsNil(o.Pending) {
		var ret []SchemaInitializerType
		return ret
	}
	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaInitializersType) GetPendingOk() ([]SchemaInitializerType, bool) {
	if o == nil || IsNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *SchemaInitializersType) HasPending() bool {
	if o != nil && !IsNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given []SchemaInitializerType and assigns it to the Pending field.
func (o *SchemaInitializersType) SetPending(v []SchemaInitializerType) {
	o.Pending = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *SchemaInitializersType) GetResult() SchemaStatusType {
	if o == nil || IsNil(o.Result) {
		var ret SchemaStatusType
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaInitializersType) GetResultOk() (*SchemaStatusType, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *SchemaInitializersType) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given SchemaStatusType and assigns it to the Result field.
func (o *SchemaInitializersType) SetResult(v SchemaStatusType) {
	o.Result = &v
}

func (o SchemaInitializersType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaInitializersType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableSchemaInitializersType struct {
	value *SchemaInitializersType
	isSet bool
}

func (v NullableSchemaInitializersType) Get() *SchemaInitializersType {
	return v.value
}

func (v *NullableSchemaInitializersType) Set(val *SchemaInitializersType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaInitializersType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaInitializersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaInitializersType(val *SchemaInitializersType) *NullableSchemaInitializersType {
	return &NullableSchemaInitializersType{value: val, isSet: true}
}

func (v NullableSchemaInitializersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaInitializersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


