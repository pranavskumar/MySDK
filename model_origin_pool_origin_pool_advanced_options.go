/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OriginPoolOriginPoolAdvancedOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OriginPoolOriginPoolAdvancedOptions{}

// OriginPoolOriginPoolAdvancedOptions Configure Advanced options for origin pool
type OriginPoolOriginPoolAdvancedOptions struct {
	// This can be used for messages where no values are needed
	AutoHttpConfig map[string]interface{} `json:"auto_http_config,omitempty"`
	CircuitBreaker *ClusterCircuitBreaker `json:"circuit_breaker,omitempty"`
	//  The timeout for new network connections to endpoints in the cluster.  This is specified in milliseconds. The default value is 2 seconds  Example: ` \"4000\"`  Validation Rules:   ves.io.schema.rules.uint32.lte: 1800000 
	ConnectionTimeout *int64 `json:"connection_timeout,omitempty"`
	// This can be used for messages where no values are needed
	DefaultCircuitBreaker map[string]interface{} `json:"default_circuit_breaker,omitempty"`
	// This can be used for messages where no values are needed
	DisableCircuitBreaker map[string]interface{} `json:"disable_circuit_breaker,omitempty"`
	// This can be used for messages where no values are needed
	DisableOutlierDetection map[string]interface{} `json:"disable_outlier_detection,omitempty"`
	// This can be used for messages where no values are needed
	DisableSubsets map[string]interface{} `json:"disable_subsets,omitempty"`
	EnableSubsets *OriginPoolOriginPoolSubsets `json:"enable_subsets,omitempty"`
	HeaderTransformationType *SchemaHeaderTransformationType `json:"header_transformation_type,omitempty"`
	// This can be used for messages where no values are needed
	Http1Config map[string]interface{} `json:"http1_config,omitempty"`
	Http2Options *ClusterHttp2ProtocolOptions `json:"http2_options,omitempty"`
	//  The idle timeout for upstream connection pool connections. The idle timeout is defined as the  period in which there are no active requests. When the idle timeout is reached the connection  will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.  This is specified in milliseconds. The default value is 5 minutes.  Example: ` \"60000\"`  Validation Rules:   ves.io.schema.rules.uint32.lte: 600000 
	HttpIdleTimeout *int64 `json:"http_idle_timeout,omitempty"`
	// This can be used for messages where no values are needed
	NoPanicThreshold map[string]interface{} `json:"no_panic_threshold,omitempty"`
	OutlierDetection *ClusterOutlierDetectionType `json:"outlier_detection,omitempty"`
	// Exclusive with [no_panic_threshold]  x-example:\"25\"  Configure a threshold (percentage of unhealthy endpoints) below which  all endpoints will be considered for load balancing ignoring its health status.  Validation Rules:   ves.io.schema.rules.uint32.lte: 100 
	PanicThreshold *int64 `json:"panic_threshold,omitempty"`
}

// NewOriginPoolOriginPoolAdvancedOptions instantiates a new OriginPoolOriginPoolAdvancedOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOriginPoolOriginPoolAdvancedOptions() *OriginPoolOriginPoolAdvancedOptions {
	this := OriginPoolOriginPoolAdvancedOptions{}
	return &this
}

// NewOriginPoolOriginPoolAdvancedOptionsWithDefaults instantiates a new OriginPoolOriginPoolAdvancedOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginPoolOriginPoolAdvancedOptionsWithDefaults() *OriginPoolOriginPoolAdvancedOptions {
	this := OriginPoolOriginPoolAdvancedOptions{}
	return &this
}

// GetAutoHttpConfig returns the AutoHttpConfig field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetAutoHttpConfig() map[string]interface{} {
	if o == nil || IsNil(o.AutoHttpConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.AutoHttpConfig
}

// GetAutoHttpConfigOk returns a tuple with the AutoHttpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetAutoHttpConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AutoHttpConfig) {
		return map[string]interface{}{}, false
	}
	return o.AutoHttpConfig, true
}

// HasAutoHttpConfig returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasAutoHttpConfig() bool {
	if o != nil && !IsNil(o.AutoHttpConfig) {
		return true
	}

	return false
}

// SetAutoHttpConfig gets a reference to the given map[string]interface{} and assigns it to the AutoHttpConfig field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetAutoHttpConfig(v map[string]interface{}) {
	o.AutoHttpConfig = v
}

// GetCircuitBreaker returns the CircuitBreaker field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetCircuitBreaker() ClusterCircuitBreaker {
	if o == nil || IsNil(o.CircuitBreaker) {
		var ret ClusterCircuitBreaker
		return ret
	}
	return *o.CircuitBreaker
}

// GetCircuitBreakerOk returns a tuple with the CircuitBreaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetCircuitBreakerOk() (*ClusterCircuitBreaker, bool) {
	if o == nil || IsNil(o.CircuitBreaker) {
		return nil, false
	}
	return o.CircuitBreaker, true
}

// HasCircuitBreaker returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasCircuitBreaker() bool {
	if o != nil && !IsNil(o.CircuitBreaker) {
		return true
	}

	return false
}

// SetCircuitBreaker gets a reference to the given ClusterCircuitBreaker and assigns it to the CircuitBreaker field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetCircuitBreaker(v ClusterCircuitBreaker) {
	o.CircuitBreaker = &v
}

// GetConnectionTimeout returns the ConnectionTimeout field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetConnectionTimeout() int64 {
	if o == nil || IsNil(o.ConnectionTimeout) {
		var ret int64
		return ret
	}
	return *o.ConnectionTimeout
}

// GetConnectionTimeoutOk returns a tuple with the ConnectionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetConnectionTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.ConnectionTimeout) {
		return nil, false
	}
	return o.ConnectionTimeout, true
}

// HasConnectionTimeout returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasConnectionTimeout() bool {
	if o != nil && !IsNil(o.ConnectionTimeout) {
		return true
	}

	return false
}

// SetConnectionTimeout gets a reference to the given int64 and assigns it to the ConnectionTimeout field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetConnectionTimeout(v int64) {
	o.ConnectionTimeout = &v
}

// GetDefaultCircuitBreaker returns the DefaultCircuitBreaker field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetDefaultCircuitBreaker() map[string]interface{} {
	if o == nil || IsNil(o.DefaultCircuitBreaker) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultCircuitBreaker
}

// GetDefaultCircuitBreakerOk returns a tuple with the DefaultCircuitBreaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetDefaultCircuitBreakerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultCircuitBreaker) {
		return map[string]interface{}{}, false
	}
	return o.DefaultCircuitBreaker, true
}

// HasDefaultCircuitBreaker returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasDefaultCircuitBreaker() bool {
	if o != nil && !IsNil(o.DefaultCircuitBreaker) {
		return true
	}

	return false
}

// SetDefaultCircuitBreaker gets a reference to the given map[string]interface{} and assigns it to the DefaultCircuitBreaker field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetDefaultCircuitBreaker(v map[string]interface{}) {
	o.DefaultCircuitBreaker = v
}

// GetDisableCircuitBreaker returns the DisableCircuitBreaker field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetDisableCircuitBreaker() map[string]interface{} {
	if o == nil || IsNil(o.DisableCircuitBreaker) {
		var ret map[string]interface{}
		return ret
	}
	return o.DisableCircuitBreaker
}

// GetDisableCircuitBreakerOk returns a tuple with the DisableCircuitBreaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetDisableCircuitBreakerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisableCircuitBreaker) {
		return map[string]interface{}{}, false
	}
	return o.DisableCircuitBreaker, true
}

// HasDisableCircuitBreaker returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasDisableCircuitBreaker() bool {
	if o != nil && !IsNil(o.DisableCircuitBreaker) {
		return true
	}

	return false
}

// SetDisableCircuitBreaker gets a reference to the given map[string]interface{} and assigns it to the DisableCircuitBreaker field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetDisableCircuitBreaker(v map[string]interface{}) {
	o.DisableCircuitBreaker = v
}

// GetDisableOutlierDetection returns the DisableOutlierDetection field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetDisableOutlierDetection() map[string]interface{} {
	if o == nil || IsNil(o.DisableOutlierDetection) {
		var ret map[string]interface{}
		return ret
	}
	return o.DisableOutlierDetection
}

// GetDisableOutlierDetectionOk returns a tuple with the DisableOutlierDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetDisableOutlierDetectionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisableOutlierDetection) {
		return map[string]interface{}{}, false
	}
	return o.DisableOutlierDetection, true
}

// HasDisableOutlierDetection returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasDisableOutlierDetection() bool {
	if o != nil && !IsNil(o.DisableOutlierDetection) {
		return true
	}

	return false
}

// SetDisableOutlierDetection gets a reference to the given map[string]interface{} and assigns it to the DisableOutlierDetection field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetDisableOutlierDetection(v map[string]interface{}) {
	o.DisableOutlierDetection = v
}

// GetDisableSubsets returns the DisableSubsets field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetDisableSubsets() map[string]interface{} {
	if o == nil || IsNil(o.DisableSubsets) {
		var ret map[string]interface{}
		return ret
	}
	return o.DisableSubsets
}

// GetDisableSubsetsOk returns a tuple with the DisableSubsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetDisableSubsetsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisableSubsets) {
		return map[string]interface{}{}, false
	}
	return o.DisableSubsets, true
}

// HasDisableSubsets returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasDisableSubsets() bool {
	if o != nil && !IsNil(o.DisableSubsets) {
		return true
	}

	return false
}

// SetDisableSubsets gets a reference to the given map[string]interface{} and assigns it to the DisableSubsets field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetDisableSubsets(v map[string]interface{}) {
	o.DisableSubsets = v
}

// GetEnableSubsets returns the EnableSubsets field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetEnableSubsets() OriginPoolOriginPoolSubsets {
	if o == nil || IsNil(o.EnableSubsets) {
		var ret OriginPoolOriginPoolSubsets
		return ret
	}
	return *o.EnableSubsets
}

// GetEnableSubsetsOk returns a tuple with the EnableSubsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetEnableSubsetsOk() (*OriginPoolOriginPoolSubsets, bool) {
	if o == nil || IsNil(o.EnableSubsets) {
		return nil, false
	}
	return o.EnableSubsets, true
}

// HasEnableSubsets returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasEnableSubsets() bool {
	if o != nil && !IsNil(o.EnableSubsets) {
		return true
	}

	return false
}

// SetEnableSubsets gets a reference to the given OriginPoolOriginPoolSubsets and assigns it to the EnableSubsets field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetEnableSubsets(v OriginPoolOriginPoolSubsets) {
	o.EnableSubsets = &v
}

// GetHeaderTransformationType returns the HeaderTransformationType field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetHeaderTransformationType() SchemaHeaderTransformationType {
	if o == nil || IsNil(o.HeaderTransformationType) {
		var ret SchemaHeaderTransformationType
		return ret
	}
	return *o.HeaderTransformationType
}

// GetHeaderTransformationTypeOk returns a tuple with the HeaderTransformationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetHeaderTransformationTypeOk() (*SchemaHeaderTransformationType, bool) {
	if o == nil || IsNil(o.HeaderTransformationType) {
		return nil, false
	}
	return o.HeaderTransformationType, true
}

// HasHeaderTransformationType returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasHeaderTransformationType() bool {
	if o != nil && !IsNil(o.HeaderTransformationType) {
		return true
	}

	return false
}

// SetHeaderTransformationType gets a reference to the given SchemaHeaderTransformationType and assigns it to the HeaderTransformationType field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetHeaderTransformationType(v SchemaHeaderTransformationType) {
	o.HeaderTransformationType = &v
}

// GetHttp1Config returns the Http1Config field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetHttp1Config() map[string]interface{} {
	if o == nil || IsNil(o.Http1Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Http1Config
}

// GetHttp1ConfigOk returns a tuple with the Http1Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetHttp1ConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Http1Config) {
		return map[string]interface{}{}, false
	}
	return o.Http1Config, true
}

// HasHttp1Config returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasHttp1Config() bool {
	if o != nil && !IsNil(o.Http1Config) {
		return true
	}

	return false
}

// SetHttp1Config gets a reference to the given map[string]interface{} and assigns it to the Http1Config field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetHttp1Config(v map[string]interface{}) {
	o.Http1Config = v
}

// GetHttp2Options returns the Http2Options field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetHttp2Options() ClusterHttp2ProtocolOptions {
	if o == nil || IsNil(o.Http2Options) {
		var ret ClusterHttp2ProtocolOptions
		return ret
	}
	return *o.Http2Options
}

// GetHttp2OptionsOk returns a tuple with the Http2Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetHttp2OptionsOk() (*ClusterHttp2ProtocolOptions, bool) {
	if o == nil || IsNil(o.Http2Options) {
		return nil, false
	}
	return o.Http2Options, true
}

// HasHttp2Options returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasHttp2Options() bool {
	if o != nil && !IsNil(o.Http2Options) {
		return true
	}

	return false
}

// SetHttp2Options gets a reference to the given ClusterHttp2ProtocolOptions and assigns it to the Http2Options field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetHttp2Options(v ClusterHttp2ProtocolOptions) {
	o.Http2Options = &v
}

// GetHttpIdleTimeout returns the HttpIdleTimeout field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetHttpIdleTimeout() int64 {
	if o == nil || IsNil(o.HttpIdleTimeout) {
		var ret int64
		return ret
	}
	return *o.HttpIdleTimeout
}

// GetHttpIdleTimeoutOk returns a tuple with the HttpIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetHttpIdleTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.HttpIdleTimeout) {
		return nil, false
	}
	return o.HttpIdleTimeout, true
}

// HasHttpIdleTimeout returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasHttpIdleTimeout() bool {
	if o != nil && !IsNil(o.HttpIdleTimeout) {
		return true
	}

	return false
}

// SetHttpIdleTimeout gets a reference to the given int64 and assigns it to the HttpIdleTimeout field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetHttpIdleTimeout(v int64) {
	o.HttpIdleTimeout = &v
}

// GetNoPanicThreshold returns the NoPanicThreshold field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetNoPanicThreshold() map[string]interface{} {
	if o == nil || IsNil(o.NoPanicThreshold) {
		var ret map[string]interface{}
		return ret
	}
	return o.NoPanicThreshold
}

// GetNoPanicThresholdOk returns a tuple with the NoPanicThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetNoPanicThresholdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NoPanicThreshold) {
		return map[string]interface{}{}, false
	}
	return o.NoPanicThreshold, true
}

// HasNoPanicThreshold returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasNoPanicThreshold() bool {
	if o != nil && !IsNil(o.NoPanicThreshold) {
		return true
	}

	return false
}

// SetNoPanicThreshold gets a reference to the given map[string]interface{} and assigns it to the NoPanicThreshold field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetNoPanicThreshold(v map[string]interface{}) {
	o.NoPanicThreshold = v
}

// GetOutlierDetection returns the OutlierDetection field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetOutlierDetection() ClusterOutlierDetectionType {
	if o == nil || IsNil(o.OutlierDetection) {
		var ret ClusterOutlierDetectionType
		return ret
	}
	return *o.OutlierDetection
}

// GetOutlierDetectionOk returns a tuple with the OutlierDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetOutlierDetectionOk() (*ClusterOutlierDetectionType, bool) {
	if o == nil || IsNil(o.OutlierDetection) {
		return nil, false
	}
	return o.OutlierDetection, true
}

// HasOutlierDetection returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasOutlierDetection() bool {
	if o != nil && !IsNil(o.OutlierDetection) {
		return true
	}

	return false
}

// SetOutlierDetection gets a reference to the given ClusterOutlierDetectionType and assigns it to the OutlierDetection field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetOutlierDetection(v ClusterOutlierDetectionType) {
	o.OutlierDetection = &v
}

// GetPanicThreshold returns the PanicThreshold field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolAdvancedOptions) GetPanicThreshold() int64 {
	if o == nil || IsNil(o.PanicThreshold) {
		var ret int64
		return ret
	}
	return *o.PanicThreshold
}

// GetPanicThresholdOk returns a tuple with the PanicThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) GetPanicThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.PanicThreshold) {
		return nil, false
	}
	return o.PanicThreshold, true
}

// HasPanicThreshold returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolAdvancedOptions) HasPanicThreshold() bool {
	if o != nil && !IsNil(o.PanicThreshold) {
		return true
	}

	return false
}

// SetPanicThreshold gets a reference to the given int64 and assigns it to the PanicThreshold field.
func (o *OriginPoolOriginPoolAdvancedOptions) SetPanicThreshold(v int64) {
	o.PanicThreshold = &v
}

func (o OriginPoolOriginPoolAdvancedOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OriginPoolOriginPoolAdvancedOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoHttpConfig) {
		toSerialize["auto_http_config"] = o.AutoHttpConfig
	}
	if !IsNil(o.CircuitBreaker) {
		toSerialize["circuit_breaker"] = o.CircuitBreaker
	}
	if !IsNil(o.ConnectionTimeout) {
		toSerialize["connection_timeout"] = o.ConnectionTimeout
	}
	if !IsNil(o.DefaultCircuitBreaker) {
		toSerialize["default_circuit_breaker"] = o.DefaultCircuitBreaker
	}
	if !IsNil(o.DisableCircuitBreaker) {
		toSerialize["disable_circuit_breaker"] = o.DisableCircuitBreaker
	}
	if !IsNil(o.DisableOutlierDetection) {
		toSerialize["disable_outlier_detection"] = o.DisableOutlierDetection
	}
	if !IsNil(o.DisableSubsets) {
		toSerialize["disable_subsets"] = o.DisableSubsets
	}
	if !IsNil(o.EnableSubsets) {
		toSerialize["enable_subsets"] = o.EnableSubsets
	}
	if !IsNil(o.HeaderTransformationType) {
		toSerialize["header_transformation_type"] = o.HeaderTransformationType
	}
	if !IsNil(o.Http1Config) {
		toSerialize["http1_config"] = o.Http1Config
	}
	if !IsNil(o.Http2Options) {
		toSerialize["http2_options"] = o.Http2Options
	}
	if !IsNil(o.HttpIdleTimeout) {
		toSerialize["http_idle_timeout"] = o.HttpIdleTimeout
	}
	if !IsNil(o.NoPanicThreshold) {
		toSerialize["no_panic_threshold"] = o.NoPanicThreshold
	}
	if !IsNil(o.OutlierDetection) {
		toSerialize["outlier_detection"] = o.OutlierDetection
	}
	if !IsNil(o.PanicThreshold) {
		toSerialize["panic_threshold"] = o.PanicThreshold
	}
	return toSerialize, nil
}

type NullableOriginPoolOriginPoolAdvancedOptions struct {
	value *OriginPoolOriginPoolAdvancedOptions
	isSet bool
}

func (v NullableOriginPoolOriginPoolAdvancedOptions) Get() *OriginPoolOriginPoolAdvancedOptions {
	return v.value
}

func (v *NullableOriginPoolOriginPoolAdvancedOptions) Set(val *OriginPoolOriginPoolAdvancedOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginPoolOriginPoolAdvancedOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginPoolOriginPoolAdvancedOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginPoolOriginPoolAdvancedOptions(val *OriginPoolOriginPoolAdvancedOptions) *NullableOriginPoolOriginPoolAdvancedOptions {
	return &NullableOriginPoolOriginPoolAdvancedOptions{value: val, isSet: true}
}

func (v NullableOriginPoolOriginPoolAdvancedOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginPoolOriginPoolAdvancedOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


