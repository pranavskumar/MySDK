/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SchemaTlsProtocol TlsProtocol is enumeration of supported TLS versions  F5 Distributed Cloud will choose the optimal TLS version.
type SchemaTlsProtocol string

// List of schemaTlsProtocol
const (
	TLS_AUTO SchemaTlsProtocol = "TLS_AUTO"
	TLSV1_0 SchemaTlsProtocol = "TLSv1_0"
	TLSV1_1 SchemaTlsProtocol = "TLSv1_1"
	TLSV1_2 SchemaTlsProtocol = "TLSv1_2"
	TLSV1_3 SchemaTlsProtocol = "TLSv1_3"
)

// All allowed values of SchemaTlsProtocol enum
var AllowedSchemaTlsProtocolEnumValues = []SchemaTlsProtocol{
	"TLS_AUTO",
	"TLSv1_0",
	"TLSv1_1",
	"TLSv1_2",
	"TLSv1_3",
}

func (v *SchemaTlsProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaTlsProtocol(value)
	for _, existing := range AllowedSchemaTlsProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaTlsProtocol", value)
}

// NewSchemaTlsProtocolFromValue returns a pointer to a valid SchemaTlsProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaTlsProtocolFromValue(v string) (*SchemaTlsProtocol, error) {
	ev := SchemaTlsProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaTlsProtocol: valid values are %v", v, AllowedSchemaTlsProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaTlsProtocol) IsValid() bool {
	for _, existing := range AllowedSchemaTlsProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to schemaTlsProtocol value
func (v SchemaTlsProtocol) Ptr() *SchemaTlsProtocol {
	return &v
}

type NullableSchemaTlsProtocol struct {
	value *SchemaTlsProtocol
	isSet bool
}

func (v NullableSchemaTlsProtocol) Get() *SchemaTlsProtocol {
	return v.value
}

func (v *NullableSchemaTlsProtocol) Set(val *SchemaTlsProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaTlsProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaTlsProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaTlsProtocol(val *SchemaTlsProtocol) *NullableSchemaTlsProtocol {
	return &NullableSchemaTlsProtocol{value: val, isSet: true}
}

func (v NullableSchemaTlsProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaTlsProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

