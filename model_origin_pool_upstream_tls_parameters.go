/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OriginPoolUpstreamTlsParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OriginPoolUpstreamTlsParameters{}

// OriginPoolUpstreamTlsParameters Upstream TLS Parameters
type OriginPoolUpstreamTlsParameters struct {
	// This can be used for messages where no values are needed
	DisableSni map[string]interface{} `json:"disable_sni,omitempty"`
	// This can be used for messages where no values are needed
	NoMtls map[string]interface{} `json:"no_mtls,omitempty"`
	// This can be used for messages where no values are needed
	SkipServerVerification map[string]interface{} `json:"skip_server_verification,omitempty"`
	// Exclusive with [disable_sni use_host_header_as_sni]  SNI value to be used.  Validation Rules:   ves.io.schema.rules.string.hostname: true   ves.io.schema.rules.string.max_len: 256 
	Sni *string `json:"sni,omitempty"`
	TlsConfig *ViewsTlsConfig `json:"tls_config,omitempty"`
	// This can be used for messages where no values are needed
	UseHostHeaderAsSni map[string]interface{} `json:"use_host_header_as_sni,omitempty"`
	UseMtls *OriginPoolTlsCertificatesType `json:"use_mtls,omitempty"`
	UseServerVerification *OriginPoolUpstreamTlsValidationContext `json:"use_server_verification,omitempty"`
	// This can be used for messages where no values are needed
	VolterraTrustedCa map[string]interface{} `json:"volterra_trusted_ca,omitempty"`
}

// NewOriginPoolUpstreamTlsParameters instantiates a new OriginPoolUpstreamTlsParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOriginPoolUpstreamTlsParameters() *OriginPoolUpstreamTlsParameters {
	this := OriginPoolUpstreamTlsParameters{}
	return &this
}

// NewOriginPoolUpstreamTlsParametersWithDefaults instantiates a new OriginPoolUpstreamTlsParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginPoolUpstreamTlsParametersWithDefaults() *OriginPoolUpstreamTlsParameters {
	this := OriginPoolUpstreamTlsParameters{}
	return &this
}

// GetDisableSni returns the DisableSni field value if set, zero value otherwise.
func (o *OriginPoolUpstreamTlsParameters) GetDisableSni() map[string]interface{} {
	if o == nil || IsNil(o.DisableSni) {
		var ret map[string]interface{}
		return ret
	}
	return o.DisableSni
}

// GetDisableSniOk returns a tuple with the DisableSni field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolUpstreamTlsParameters) GetDisableSniOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisableSni) {
		return map[string]interface{}{}, false
	}
	return o.DisableSni, true
}

// HasDisableSni returns a boolean if a field has been set.
func (o *OriginPoolUpstreamTlsParameters) HasDisableSni() bool {
	if o != nil && !IsNil(o.DisableSni) {
		return true
	}

	return false
}

// SetDisableSni gets a reference to the given map[string]interface{} and assigns it to the DisableSni field.
func (o *OriginPoolUpstreamTlsParameters) SetDisableSni(v map[string]interface{}) {
	o.DisableSni = v
}

// GetNoMtls returns the NoMtls field value if set, zero value otherwise.
func (o *OriginPoolUpstreamTlsParameters) GetNoMtls() map[string]interface{} {
	if o == nil || IsNil(o.NoMtls) {
		var ret map[string]interface{}
		return ret
	}
	return o.NoMtls
}

// GetNoMtlsOk returns a tuple with the NoMtls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolUpstreamTlsParameters) GetNoMtlsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NoMtls) {
		return map[string]interface{}{}, false
	}
	return o.NoMtls, true
}

// HasNoMtls returns a boolean if a field has been set.
func (o *OriginPoolUpstreamTlsParameters) HasNoMtls() bool {
	if o != nil && !IsNil(o.NoMtls) {
		return true
	}

	return false
}

// SetNoMtls gets a reference to the given map[string]interface{} and assigns it to the NoMtls field.
func (o *OriginPoolUpstreamTlsParameters) SetNoMtls(v map[string]interface{}) {
	o.NoMtls = v
}

// GetSkipServerVerification returns the SkipServerVerification field value if set, zero value otherwise.
func (o *OriginPoolUpstreamTlsParameters) GetSkipServerVerification() map[string]interface{} {
	if o == nil || IsNil(o.SkipServerVerification) {
		var ret map[string]interface{}
		return ret
	}
	return o.SkipServerVerification
}

// GetSkipServerVerificationOk returns a tuple with the SkipServerVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolUpstreamTlsParameters) GetSkipServerVerificationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SkipServerVerification) {
		return map[string]interface{}{}, false
	}
	return o.SkipServerVerification, true
}

// HasSkipServerVerification returns a boolean if a field has been set.
func (o *OriginPoolUpstreamTlsParameters) HasSkipServerVerification() bool {
	if o != nil && !IsNil(o.SkipServerVerification) {
		return true
	}

	return false
}

// SetSkipServerVerification gets a reference to the given map[string]interface{} and assigns it to the SkipServerVerification field.
func (o *OriginPoolUpstreamTlsParameters) SetSkipServerVerification(v map[string]interface{}) {
	o.SkipServerVerification = v
}

// GetSni returns the Sni field value if set, zero value otherwise.
func (o *OriginPoolUpstreamTlsParameters) GetSni() string {
	if o == nil || IsNil(o.Sni) {
		var ret string
		return ret
	}
	return *o.Sni
}

// GetSniOk returns a tuple with the Sni field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolUpstreamTlsParameters) GetSniOk() (*string, bool) {
	if o == nil || IsNil(o.Sni) {
		return nil, false
	}
	return o.Sni, true
}

// HasSni returns a boolean if a field has been set.
func (o *OriginPoolUpstreamTlsParameters) HasSni() bool {
	if o != nil && !IsNil(o.Sni) {
		return true
	}

	return false
}

// SetSni gets a reference to the given string and assigns it to the Sni field.
func (o *OriginPoolUpstreamTlsParameters) SetSni(v string) {
	o.Sni = &v
}

// GetTlsConfig returns the TlsConfig field value if set, zero value otherwise.
func (o *OriginPoolUpstreamTlsParameters) GetTlsConfig() ViewsTlsConfig {
	if o == nil || IsNil(o.TlsConfig) {
		var ret ViewsTlsConfig
		return ret
	}
	return *o.TlsConfig
}

// GetTlsConfigOk returns a tuple with the TlsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolUpstreamTlsParameters) GetTlsConfigOk() (*ViewsTlsConfig, bool) {
	if o == nil || IsNil(o.TlsConfig) {
		return nil, false
	}
	return o.TlsConfig, true
}

// HasTlsConfig returns a boolean if a field has been set.
func (o *OriginPoolUpstreamTlsParameters) HasTlsConfig() bool {
	if o != nil && !IsNil(o.TlsConfig) {
		return true
	}

	return false
}

// SetTlsConfig gets a reference to the given ViewsTlsConfig and assigns it to the TlsConfig field.
func (o *OriginPoolUpstreamTlsParameters) SetTlsConfig(v ViewsTlsConfig) {
	o.TlsConfig = &v
}

// GetUseHostHeaderAsSni returns the UseHostHeaderAsSni field value if set, zero value otherwise.
func (o *OriginPoolUpstreamTlsParameters) GetUseHostHeaderAsSni() map[string]interface{} {
	if o == nil || IsNil(o.UseHostHeaderAsSni) {
		var ret map[string]interface{}
		return ret
	}
	return o.UseHostHeaderAsSni
}

// GetUseHostHeaderAsSniOk returns a tuple with the UseHostHeaderAsSni field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolUpstreamTlsParameters) GetUseHostHeaderAsSniOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UseHostHeaderAsSni) {
		return map[string]interface{}{}, false
	}
	return o.UseHostHeaderAsSni, true
}

// HasUseHostHeaderAsSni returns a boolean if a field has been set.
func (o *OriginPoolUpstreamTlsParameters) HasUseHostHeaderAsSni() bool {
	if o != nil && !IsNil(o.UseHostHeaderAsSni) {
		return true
	}

	return false
}

// SetUseHostHeaderAsSni gets a reference to the given map[string]interface{} and assigns it to the UseHostHeaderAsSni field.
func (o *OriginPoolUpstreamTlsParameters) SetUseHostHeaderAsSni(v map[string]interface{}) {
	o.UseHostHeaderAsSni = v
}

// GetUseMtls returns the UseMtls field value if set, zero value otherwise.
func (o *OriginPoolUpstreamTlsParameters) GetUseMtls() OriginPoolTlsCertificatesType {
	if o == nil || IsNil(o.UseMtls) {
		var ret OriginPoolTlsCertificatesType
		return ret
	}
	return *o.UseMtls
}

// GetUseMtlsOk returns a tuple with the UseMtls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolUpstreamTlsParameters) GetUseMtlsOk() (*OriginPoolTlsCertificatesType, bool) {
	if o == nil || IsNil(o.UseMtls) {
		return nil, false
	}
	return o.UseMtls, true
}

// HasUseMtls returns a boolean if a field has been set.
func (o *OriginPoolUpstreamTlsParameters) HasUseMtls() bool {
	if o != nil && !IsNil(o.UseMtls) {
		return true
	}

	return false
}

// SetUseMtls gets a reference to the given OriginPoolTlsCertificatesType and assigns it to the UseMtls field.
func (o *OriginPoolUpstreamTlsParameters) SetUseMtls(v OriginPoolTlsCertificatesType) {
	o.UseMtls = &v
}

// GetUseServerVerification returns the UseServerVerification field value if set, zero value otherwise.
func (o *OriginPoolUpstreamTlsParameters) GetUseServerVerification() OriginPoolUpstreamTlsValidationContext {
	if o == nil || IsNil(o.UseServerVerification) {
		var ret OriginPoolUpstreamTlsValidationContext
		return ret
	}
	return *o.UseServerVerification
}

// GetUseServerVerificationOk returns a tuple with the UseServerVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolUpstreamTlsParameters) GetUseServerVerificationOk() (*OriginPoolUpstreamTlsValidationContext, bool) {
	if o == nil || IsNil(o.UseServerVerification) {
		return nil, false
	}
	return o.UseServerVerification, true
}

// HasUseServerVerification returns a boolean if a field has been set.
func (o *OriginPoolUpstreamTlsParameters) HasUseServerVerification() bool {
	if o != nil && !IsNil(o.UseServerVerification) {
		return true
	}

	return false
}

// SetUseServerVerification gets a reference to the given OriginPoolUpstreamTlsValidationContext and assigns it to the UseServerVerification field.
func (o *OriginPoolUpstreamTlsParameters) SetUseServerVerification(v OriginPoolUpstreamTlsValidationContext) {
	o.UseServerVerification = &v
}

// GetVolterraTrustedCa returns the VolterraTrustedCa field value if set, zero value otherwise.
func (o *OriginPoolUpstreamTlsParameters) GetVolterraTrustedCa() map[string]interface{} {
	if o == nil || IsNil(o.VolterraTrustedCa) {
		var ret map[string]interface{}
		return ret
	}
	return o.VolterraTrustedCa
}

// GetVolterraTrustedCaOk returns a tuple with the VolterraTrustedCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolUpstreamTlsParameters) GetVolterraTrustedCaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.VolterraTrustedCa) {
		return map[string]interface{}{}, false
	}
	return o.VolterraTrustedCa, true
}

// HasVolterraTrustedCa returns a boolean if a field has been set.
func (o *OriginPoolUpstreamTlsParameters) HasVolterraTrustedCa() bool {
	if o != nil && !IsNil(o.VolterraTrustedCa) {
		return true
	}

	return false
}

// SetVolterraTrustedCa gets a reference to the given map[string]interface{} and assigns it to the VolterraTrustedCa field.
func (o *OriginPoolUpstreamTlsParameters) SetVolterraTrustedCa(v map[string]interface{}) {
	o.VolterraTrustedCa = v
}

func (o OriginPoolUpstreamTlsParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OriginPoolUpstreamTlsParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableSni) {
		toSerialize["disable_sni"] = o.DisableSni
	}
	if !IsNil(o.NoMtls) {
		toSerialize["no_mtls"] = o.NoMtls
	}
	if !IsNil(o.SkipServerVerification) {
		toSerialize["skip_server_verification"] = o.SkipServerVerification
	}
	if !IsNil(o.Sni) {
		toSerialize["sni"] = o.Sni
	}
	if !IsNil(o.TlsConfig) {
		toSerialize["tls_config"] = o.TlsConfig
	}
	if !IsNil(o.UseHostHeaderAsSni) {
		toSerialize["use_host_header_as_sni"] = o.UseHostHeaderAsSni
	}
	if !IsNil(o.UseMtls) {
		toSerialize["use_mtls"] = o.UseMtls
	}
	if !IsNil(o.UseServerVerification) {
		toSerialize["use_server_verification"] = o.UseServerVerification
	}
	if !IsNil(o.VolterraTrustedCa) {
		toSerialize["volterra_trusted_ca"] = o.VolterraTrustedCa
	}
	return toSerialize, nil
}

type NullableOriginPoolUpstreamTlsParameters struct {
	value *OriginPoolUpstreamTlsParameters
	isSet bool
}

func (v NullableOriginPoolUpstreamTlsParameters) Get() *OriginPoolUpstreamTlsParameters {
	return v.value
}

func (v *NullableOriginPoolUpstreamTlsParameters) Set(val *OriginPoolUpstreamTlsParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginPoolUpstreamTlsParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginPoolUpstreamTlsParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginPoolUpstreamTlsParameters(val *OriginPoolUpstreamTlsParameters) *NullableOriginPoolUpstreamTlsParameters {
	return &NullableOriginPoolUpstreamTlsParameters{value: val, isSet: true}
}

func (v NullableOriginPoolUpstreamTlsParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginPoolUpstreamTlsParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


