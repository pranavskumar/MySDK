/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OriginPoolOriginPoolDefaultSubset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OriginPoolOriginPoolDefaultSubset{}

// OriginPoolOriginPoolDefaultSubset Default Subset definition
type OriginPoolOriginPoolDefaultSubset struct {
	//  List of key-value pairs that define default subset.  which gets used when route specifies no metadata or no subset matching the metadata exists.  Example: ` \"key:value\"`  Validation Rules:   ves.io.schema.rules.map.max_pairs: 32 
	DefaultSubset map[string]interface{} `json:"default_subset,omitempty"`
}

// NewOriginPoolOriginPoolDefaultSubset instantiates a new OriginPoolOriginPoolDefaultSubset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOriginPoolOriginPoolDefaultSubset() *OriginPoolOriginPoolDefaultSubset {
	this := OriginPoolOriginPoolDefaultSubset{}
	return &this
}

// NewOriginPoolOriginPoolDefaultSubsetWithDefaults instantiates a new OriginPoolOriginPoolDefaultSubset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginPoolOriginPoolDefaultSubsetWithDefaults() *OriginPoolOriginPoolDefaultSubset {
	this := OriginPoolOriginPoolDefaultSubset{}
	return &this
}

// GetDefaultSubset returns the DefaultSubset field value if set, zero value otherwise.
func (o *OriginPoolOriginPoolDefaultSubset) GetDefaultSubset() map[string]interface{} {
	if o == nil || IsNil(o.DefaultSubset) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultSubset
}

// GetDefaultSubsetOk returns a tuple with the DefaultSubset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolOriginPoolDefaultSubset) GetDefaultSubsetOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultSubset) {
		return map[string]interface{}{}, false
	}
	return o.DefaultSubset, true
}

// HasDefaultSubset returns a boolean if a field has been set.
func (o *OriginPoolOriginPoolDefaultSubset) HasDefaultSubset() bool {
	if o != nil && !IsNil(o.DefaultSubset) {
		return true
	}

	return false
}

// SetDefaultSubset gets a reference to the given map[string]interface{} and assigns it to the DefaultSubset field.
func (o *OriginPoolOriginPoolDefaultSubset) SetDefaultSubset(v map[string]interface{}) {
	o.DefaultSubset = v
}

func (o OriginPoolOriginPoolDefaultSubset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OriginPoolOriginPoolDefaultSubset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultSubset) {
		toSerialize["default_subset"] = o.DefaultSubset
	}
	return toSerialize, nil
}

type NullableOriginPoolOriginPoolDefaultSubset struct {
	value *OriginPoolOriginPoolDefaultSubset
	isSet bool
}

func (v NullableOriginPoolOriginPoolDefaultSubset) Get() *OriginPoolOriginPoolDefaultSubset {
	return v.value
}

func (v *NullableOriginPoolOriginPoolDefaultSubset) Set(val *OriginPoolOriginPoolDefaultSubset) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginPoolOriginPoolDefaultSubset) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginPoolOriginPoolDefaultSubset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginPoolOriginPoolDefaultSubset(val *OriginPoolOriginPoolDefaultSubset) *NullableOriginPoolOriginPoolDefaultSubset {
	return &NullableOriginPoolOriginPoolDefaultSubset{value: val, isSet: true}
}

func (v NullableOriginPoolOriginPoolDefaultSubset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginPoolOriginPoolDefaultSubset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


