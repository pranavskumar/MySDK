/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaVaultSecretInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaVaultSecretInfoType{}

// SchemaVaultSecretInfoType x-displayName: \"Vault Secret\" VaultSecretInfoType specifies information about the Secret managed by Hashicorp Vault.
type SchemaVaultSecretInfoType struct {
	// x-displayName: \"Key\" x-example: \"key_pem\" Key of the individual secret. Vault Secrets are stored as key-value pair. If user is only interested in one value from the map, this field should be set to the corresponding key. If not provided entire secret will be returned.
	Key *string `json:"key,omitempty"`
	// x-displayName: \"Location\" x-required x-example: \"v1/data/vhost_key\" Path to secret in Vault.
	Location *string `json:"location,omitempty"`
	// x-displayName: \"Provider\" x-required x-example: \"vault-vh-provider\" Name of the Secret Management Access object that contains information about the backend Vault.
	Provider *string `json:"provider,omitempty"`
	SecretEncoding *SchemaSecretEncodingType `json:"secret_encoding,omitempty"`
	// x-displayName: \"Version\" x-example: \"1\" Version of the secret to be fetched. As vault secrets are versioned, user can specify this field to fetch specific version. If not provided latest version will be returned.
	Version *int64 `json:"version,omitempty"`
}

// NewSchemaVaultSecretInfoType instantiates a new SchemaVaultSecretInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaVaultSecretInfoType() *SchemaVaultSecretInfoType {
	this := SchemaVaultSecretInfoType{}
	var secretEncoding SchemaSecretEncodingType = ENCODING_NONE
	this.SecretEncoding = &secretEncoding
	return &this
}

// NewSchemaVaultSecretInfoTypeWithDefaults instantiates a new SchemaVaultSecretInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaVaultSecretInfoTypeWithDefaults() *SchemaVaultSecretInfoType {
	this := SchemaVaultSecretInfoType{}
	var secretEncoding SchemaSecretEncodingType = ENCODING_NONE
	this.SecretEncoding = &secretEncoding
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SchemaVaultSecretInfoType) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaVaultSecretInfoType) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SchemaVaultSecretInfoType) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SchemaVaultSecretInfoType) SetKey(v string) {
	o.Key = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SchemaVaultSecretInfoType) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaVaultSecretInfoType) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SchemaVaultSecretInfoType) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *SchemaVaultSecretInfoType) SetLocation(v string) {
	o.Location = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *SchemaVaultSecretInfoType) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaVaultSecretInfoType) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *SchemaVaultSecretInfoType) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *SchemaVaultSecretInfoType) SetProvider(v string) {
	o.Provider = &v
}

// GetSecretEncoding returns the SecretEncoding field value if set, zero value otherwise.
func (o *SchemaVaultSecretInfoType) GetSecretEncoding() SchemaSecretEncodingType {
	if o == nil || IsNil(o.SecretEncoding) {
		var ret SchemaSecretEncodingType
		return ret
	}
	return *o.SecretEncoding
}

// GetSecretEncodingOk returns a tuple with the SecretEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaVaultSecretInfoType) GetSecretEncodingOk() (*SchemaSecretEncodingType, bool) {
	if o == nil || IsNil(o.SecretEncoding) {
		return nil, false
	}
	return o.SecretEncoding, true
}

// HasSecretEncoding returns a boolean if a field has been set.
func (o *SchemaVaultSecretInfoType) HasSecretEncoding() bool {
	if o != nil && !IsNil(o.SecretEncoding) {
		return true
	}

	return false
}

// SetSecretEncoding gets a reference to the given SchemaSecretEncodingType and assigns it to the SecretEncoding field.
func (o *SchemaVaultSecretInfoType) SetSecretEncoding(v SchemaSecretEncodingType) {
	o.SecretEncoding = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SchemaVaultSecretInfoType) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaVaultSecretInfoType) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SchemaVaultSecretInfoType) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SchemaVaultSecretInfoType) SetVersion(v int64) {
	o.Version = &v
}

func (o SchemaVaultSecretInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaVaultSecretInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.SecretEncoding) {
		toSerialize["secret_encoding"] = o.SecretEncoding
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableSchemaVaultSecretInfoType struct {
	value *SchemaVaultSecretInfoType
	isSet bool
}

func (v NullableSchemaVaultSecretInfoType) Get() *SchemaVaultSecretInfoType {
	return v.value
}

func (v *NullableSchemaVaultSecretInfoType) Set(val *SchemaVaultSecretInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaVaultSecretInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaVaultSecretInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaVaultSecretInfoType(val *SchemaVaultSecretInfoType) *NullableSchemaVaultSecretInfoType {
	return &NullableSchemaVaultSecretInfoType{value: val, isSet: true}
}

func (v NullableSchemaVaultSecretInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaVaultSecretInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


