/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaObjectCreateMetaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaObjectCreateMetaType{}

// SchemaObjectCreateMetaType ObjectCreateMetaType is metadata that can be specified in Create request of an object.
type SchemaObjectCreateMetaType struct {
	//  Annotations is an unstructured key value map stored with a resource that may be  set by external tools to store and retrieve arbitrary metadata. They are not  queryable and should be preserved when modifying objects.  Example: ` \"value\"`  Validation Rules:   ves.io.schema.rules.map.keys.string.max_len: 64   ves.io.schema.rules.map.keys.string.min_len: 1   ves.io.schema.rules.map.values.string.max_len: 1024   ves.io.schema.rules.map.values.string.min_len: 1 
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	//  Human readable description for the object  Example: ` \"Virtual Host for acmecorp website\"`
	Description *string `json:"description,omitempty"`
	//  A value of true will administratively disable the object  Example: ` \"true\"`
	Disable *bool `json:"disable,omitempty"`
	//  Map of string keys and values that can be used to organize and categorize  (scope and select) objects as chosen by the user. Values specified here will be used  by selector expression  Example: ` \"value\"`
	Labels map[string]interface{} `json:"labels,omitempty"`
	//  This is the name of configuration object. It has to be unique within the namespace.  It can only be specified during create API and cannot be changed during replace API.  The value of name has to follow DNS-1035 format.  Example: ` \"acmecorp-web\"`  Required: YES  Validation Rules:   ves.io.schema.rules.message.required: true 
	Name *string `json:"name,omitempty"`
	//  This defines the workspace within which each the configuration object is to be created.  Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"  Example: ` \"staging\"`
	Namespace *string `json:"namespace,omitempty"`
}

// NewSchemaObjectCreateMetaType instantiates a new SchemaObjectCreateMetaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaObjectCreateMetaType() *SchemaObjectCreateMetaType {
	this := SchemaObjectCreateMetaType{}
	return &this
}

// NewSchemaObjectCreateMetaTypeWithDefaults instantiates a new SchemaObjectCreateMetaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaObjectCreateMetaTypeWithDefaults() *SchemaObjectCreateMetaType {
	this := SchemaObjectCreateMetaType{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *SchemaObjectCreateMetaType) GetAnnotations() map[string]interface{} {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]interface{}
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObjectCreateMetaType) GetAnnotationsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Annotations) {
		return map[string]interface{}{}, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *SchemaObjectCreateMetaType) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]interface{} and assigns it to the Annotations field.
func (o *SchemaObjectCreateMetaType) SetAnnotations(v map[string]interface{}) {
	o.Annotations = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaObjectCreateMetaType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObjectCreateMetaType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaObjectCreateMetaType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaObjectCreateMetaType) SetDescription(v string) {
	o.Description = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *SchemaObjectCreateMetaType) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObjectCreateMetaType) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *SchemaObjectCreateMetaType) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *SchemaObjectCreateMetaType) SetDisable(v bool) {
	o.Disable = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *SchemaObjectCreateMetaType) GetLabels() map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObjectCreateMetaType) GetLabelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *SchemaObjectCreateMetaType) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *SchemaObjectCreateMetaType) SetLabels(v map[string]interface{}) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaObjectCreateMetaType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObjectCreateMetaType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaObjectCreateMetaType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchemaObjectCreateMetaType) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *SchemaObjectCreateMetaType) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObjectCreateMetaType) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *SchemaObjectCreateMetaType) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *SchemaObjectCreateMetaType) SetNamespace(v string) {
	o.Namespace = &v
}

func (o SchemaObjectCreateMetaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaObjectCreateMetaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableSchemaObjectCreateMetaType struct {
	value *SchemaObjectCreateMetaType
	isSet bool
}

func (v NullableSchemaObjectCreateMetaType) Get() *SchemaObjectCreateMetaType {
	return v.value
}

func (v *NullableSchemaObjectCreateMetaType) Set(val *SchemaObjectCreateMetaType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaObjectCreateMetaType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaObjectCreateMetaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaObjectCreateMetaType(val *SchemaObjectCreateMetaType) *NullableSchemaObjectCreateMetaType {
	return &NullableSchemaObjectCreateMetaType{value: val, isSet: true}
}

func (v NullableSchemaObjectCreateMetaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaObjectCreateMetaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


