/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SchemaRoutingPriority Priority routing for each request. Different connection pools are used based on the priority selected for the request. Also, circuit-breaker configuration at destination cluster is chosen based on selected priority.  Default routing mechanism High-Priority routing mechanism
type SchemaRoutingPriority string

// List of schemaRoutingPriority
const (
	DEFAULT SchemaRoutingPriority = "DEFAULT"
	HIGH SchemaRoutingPriority = "HIGH"
)

// All allowed values of SchemaRoutingPriority enum
var AllowedSchemaRoutingPriorityEnumValues = []SchemaRoutingPriority{
	"DEFAULT",
	"HIGH",
}

func (v *SchemaRoutingPriority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaRoutingPriority(value)
	for _, existing := range AllowedSchemaRoutingPriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaRoutingPriority", value)
}

// NewSchemaRoutingPriorityFromValue returns a pointer to a valid SchemaRoutingPriority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaRoutingPriorityFromValue(v string) (*SchemaRoutingPriority, error) {
	ev := SchemaRoutingPriority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaRoutingPriority: valid values are %v", v, AllowedSchemaRoutingPriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaRoutingPriority) IsValid() bool {
	for _, existing := range AllowedSchemaRoutingPriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to schemaRoutingPriority value
func (v SchemaRoutingPriority) Ptr() *SchemaRoutingPriority {
	return &v
}

type NullableSchemaRoutingPriority struct {
	value *SchemaRoutingPriority
	isSet bool
}

func (v NullableSchemaRoutingPriority) Get() *SchemaRoutingPriority {
	return v.value
}

func (v *NullableSchemaRoutingPriority) Set(val *SchemaRoutingPriority) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaRoutingPriority) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaRoutingPriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaRoutingPriority(val *SchemaRoutingPriority) *NullableSchemaRoutingPriority {
	return &NullableSchemaRoutingPriority{value: val, isSet: true}
}

func (v NullableSchemaRoutingPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaRoutingPriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

