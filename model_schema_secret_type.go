/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaSecretType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaSecretType{}

// SchemaSecretType SecretType is used in an object to indicate a sensitive/confidential field
type SchemaSecretType struct {
	BlindfoldSecretInfo *SchemaBlindfoldSecretInfoType `json:"blindfold_secret_info,omitempty"`
	ClearSecretInfo *SchemaClearSecretInfoType `json:"clear_secret_info,omitempty"`
}

// NewSchemaSecretType instantiates a new SchemaSecretType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaSecretType() *SchemaSecretType {
	this := SchemaSecretType{}
	return &this
}

// NewSchemaSecretTypeWithDefaults instantiates a new SchemaSecretType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaSecretTypeWithDefaults() *SchemaSecretType {
	this := SchemaSecretType{}
	return &this
}

// GetBlindfoldSecretInfo returns the BlindfoldSecretInfo field value if set, zero value otherwise.
func (o *SchemaSecretType) GetBlindfoldSecretInfo() SchemaBlindfoldSecretInfoType {
	if o == nil || IsNil(o.BlindfoldSecretInfo) {
		var ret SchemaBlindfoldSecretInfoType
		return ret
	}
	return *o.BlindfoldSecretInfo
}

// GetBlindfoldSecretInfoOk returns a tuple with the BlindfoldSecretInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaSecretType) GetBlindfoldSecretInfoOk() (*SchemaBlindfoldSecretInfoType, bool) {
	if o == nil || IsNil(o.BlindfoldSecretInfo) {
		return nil, false
	}
	return o.BlindfoldSecretInfo, true
}

// HasBlindfoldSecretInfo returns a boolean if a field has been set.
func (o *SchemaSecretType) HasBlindfoldSecretInfo() bool {
	if o != nil && !IsNil(o.BlindfoldSecretInfo) {
		return true
	}

	return false
}

// SetBlindfoldSecretInfo gets a reference to the given SchemaBlindfoldSecretInfoType and assigns it to the BlindfoldSecretInfo field.
func (o *SchemaSecretType) SetBlindfoldSecretInfo(v SchemaBlindfoldSecretInfoType) {
	o.BlindfoldSecretInfo = &v
}

// GetClearSecretInfo returns the ClearSecretInfo field value if set, zero value otherwise.
func (o *SchemaSecretType) GetClearSecretInfo() SchemaClearSecretInfoType {
	if o == nil || IsNil(o.ClearSecretInfo) {
		var ret SchemaClearSecretInfoType
		return ret
	}
	return *o.ClearSecretInfo
}

// GetClearSecretInfoOk returns a tuple with the ClearSecretInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaSecretType) GetClearSecretInfoOk() (*SchemaClearSecretInfoType, bool) {
	if o == nil || IsNil(o.ClearSecretInfo) {
		return nil, false
	}
	return o.ClearSecretInfo, true
}

// HasClearSecretInfo returns a boolean if a field has been set.
func (o *SchemaSecretType) HasClearSecretInfo() bool {
	if o != nil && !IsNil(o.ClearSecretInfo) {
		return true
	}

	return false
}

// SetClearSecretInfo gets a reference to the given SchemaClearSecretInfoType and assigns it to the ClearSecretInfo field.
func (o *SchemaSecretType) SetClearSecretInfo(v SchemaClearSecretInfoType) {
	o.ClearSecretInfo = &v
}

func (o SchemaSecretType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaSecretType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlindfoldSecretInfo) {
		toSerialize["blindfold_secret_info"] = o.BlindfoldSecretInfo
	}
	if !IsNil(o.ClearSecretInfo) {
		toSerialize["clear_secret_info"] = o.ClearSecretInfo
	}
	return toSerialize, nil
}

type NullableSchemaSecretType struct {
	value *SchemaSecretType
	isSet bool
}

func (v NullableSchemaSecretType) Get() *SchemaSecretType {
	return v.value
}

func (v *NullableSchemaSecretType) Set(val *SchemaSecretType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaSecretType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaSecretType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaSecretType(val *SchemaSecretType) *NullableSchemaSecretType {
	return &NullableSchemaSecretType{value: val, isSet: true}
}

func (v NullableSchemaSecretType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaSecretType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


