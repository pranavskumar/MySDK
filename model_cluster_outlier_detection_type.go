/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClusterOutlierDetectionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterOutlierDetectionType{}

// ClusterOutlierDetectionType Outlier detection and ejection is the process of dynamically determining whether some number of hosts in an upstream cluster are performing unlike the others and removing them from the healthy load balancing set. Outlier detection is a form of passive health checking.  Algorithm  1. A endpoint is determined to be an outlier (based on configured number of consecutive_5xx    or consecutive_gateway_failures) . 2. If no endpoints have been ejected, loadbalancer will eject the host immediately.    Otherwise, it checks to make sure the number of ejected hosts is below the allowed threshold    (specified via max_ejection_percent setting). If the number of ejected hosts is above the    threshold, the host is not ejected. 3. The endpoint is ejected for some number of milliseconds. Ejection means that the endpoint is marked    unhealthy and will not be used during load balancing. The number of milliseconds is equal to the    base_ejection_time value multiplied by the number of times the host has been ejected. 4. An ejected endpoint will automatically be brought back into service after the ejection time    has been satisfied
type ClusterOutlierDetectionType struct {
	//  The base time that a host is ejected for. The real time is equal to the  base time multiplied by the number of times the host has been ejected.  This causes hosts to get ejected for longer periods if they continue to fail.  Defaults to 30000ms or 30s. Specified in milliseconds.  Example: ` \"20000\"`  Validation Rules:   ves.io.schema.rules.uint32.lte: 1800000 
	BaseEjectionTime *int64 `json:"base_ejection_time,omitempty"`
	//  If an upstream endpoint returns some number of consecutive 5xx, it will be ejected.  Note that in this case a 5xx means an actual 5xx respond code, or an event that would  cause the HTTP router to return one on the upstream’s behalf(reset, connection failure, etc.)  consecutive_5xx indicates the number of consecutive 5xx responses required before  a consecutive 5xx ejection occurs. Defaults to 5.  Example: ` \"3\"`  Validation Rules:   ves.io.schema.rules.uint32.lte: 1024 
	Consecutive5xx *int64 `json:"consecutive_5xx,omitempty"`
	//  If an upstream endpoint returns some number of consecutive “gateway errors”  (502, 503 or 504 status code), it will be ejected. Note that this includes events  that would cause the HTTP router to return one of these status codes on the  upstream’s behalf (reset, connection failure, etc.).  consecutive_gateway_failure indicates the number of consecutive gateway failures  before a consecutive gateway failure ejection occurs. Defaults to 5.  Example: ` \"5\"`  Validation Rules:   ves.io.schema.rules.uint32.lte: 1024 
	ConsecutiveGatewayFailure *int64 `json:"consecutive_gateway_failure,omitempty"`
	//  The time interval between ejection analysis sweeps. This can result in  both new ejections as well as endpoints being returned to service. Defaults  to 10000ms or 10s. Specified in milliseconds.  Example: ` \"5000\"`  Validation Rules:   ves.io.schema.rules.uint32.lte: 600000 
	Interval *int64 `json:"interval,omitempty"`
	//  The maximum % of an upstream cluster that can be ejected due to outlier  detection. Defaults to 10% but will eject at least one host regardless of the value.  Example: ` \"20\"`  Validation Rules:   ves.io.schema.rules.uint32.lte: 100 
	MaxEjectionPercent *int64 `json:"max_ejection_percent,omitempty"`
}

// NewClusterOutlierDetectionType instantiates a new ClusterOutlierDetectionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterOutlierDetectionType() *ClusterOutlierDetectionType {
	this := ClusterOutlierDetectionType{}
	return &this
}

// NewClusterOutlierDetectionTypeWithDefaults instantiates a new ClusterOutlierDetectionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterOutlierDetectionTypeWithDefaults() *ClusterOutlierDetectionType {
	this := ClusterOutlierDetectionType{}
	return &this
}

// GetBaseEjectionTime returns the BaseEjectionTime field value if set, zero value otherwise.
func (o *ClusterOutlierDetectionType) GetBaseEjectionTime() int64 {
	if o == nil || IsNil(o.BaseEjectionTime) {
		var ret int64
		return ret
	}
	return *o.BaseEjectionTime
}

// GetBaseEjectionTimeOk returns a tuple with the BaseEjectionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterOutlierDetectionType) GetBaseEjectionTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.BaseEjectionTime) {
		return nil, false
	}
	return o.BaseEjectionTime, true
}

// HasBaseEjectionTime returns a boolean if a field has been set.
func (o *ClusterOutlierDetectionType) HasBaseEjectionTime() bool {
	if o != nil && !IsNil(o.BaseEjectionTime) {
		return true
	}

	return false
}

// SetBaseEjectionTime gets a reference to the given int64 and assigns it to the BaseEjectionTime field.
func (o *ClusterOutlierDetectionType) SetBaseEjectionTime(v int64) {
	o.BaseEjectionTime = &v
}

// GetConsecutive5xx returns the Consecutive5xx field value if set, zero value otherwise.
func (o *ClusterOutlierDetectionType) GetConsecutive5xx() int64 {
	if o == nil || IsNil(o.Consecutive5xx) {
		var ret int64
		return ret
	}
	return *o.Consecutive5xx
}

// GetConsecutive5xxOk returns a tuple with the Consecutive5xx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterOutlierDetectionType) GetConsecutive5xxOk() (*int64, bool) {
	if o == nil || IsNil(o.Consecutive5xx) {
		return nil, false
	}
	return o.Consecutive5xx, true
}

// HasConsecutive5xx returns a boolean if a field has been set.
func (o *ClusterOutlierDetectionType) HasConsecutive5xx() bool {
	if o != nil && !IsNil(o.Consecutive5xx) {
		return true
	}

	return false
}

// SetConsecutive5xx gets a reference to the given int64 and assigns it to the Consecutive5xx field.
func (o *ClusterOutlierDetectionType) SetConsecutive5xx(v int64) {
	o.Consecutive5xx = &v
}

// GetConsecutiveGatewayFailure returns the ConsecutiveGatewayFailure field value if set, zero value otherwise.
func (o *ClusterOutlierDetectionType) GetConsecutiveGatewayFailure() int64 {
	if o == nil || IsNil(o.ConsecutiveGatewayFailure) {
		var ret int64
		return ret
	}
	return *o.ConsecutiveGatewayFailure
}

// GetConsecutiveGatewayFailureOk returns a tuple with the ConsecutiveGatewayFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterOutlierDetectionType) GetConsecutiveGatewayFailureOk() (*int64, bool) {
	if o == nil || IsNil(o.ConsecutiveGatewayFailure) {
		return nil, false
	}
	return o.ConsecutiveGatewayFailure, true
}

// HasConsecutiveGatewayFailure returns a boolean if a field has been set.
func (o *ClusterOutlierDetectionType) HasConsecutiveGatewayFailure() bool {
	if o != nil && !IsNil(o.ConsecutiveGatewayFailure) {
		return true
	}

	return false
}

// SetConsecutiveGatewayFailure gets a reference to the given int64 and assigns it to the ConsecutiveGatewayFailure field.
func (o *ClusterOutlierDetectionType) SetConsecutiveGatewayFailure(v int64) {
	o.ConsecutiveGatewayFailure = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *ClusterOutlierDetectionType) GetInterval() int64 {
	if o == nil || IsNil(o.Interval) {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterOutlierDetectionType) GetIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *ClusterOutlierDetectionType) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *ClusterOutlierDetectionType) SetInterval(v int64) {
	o.Interval = &v
}

// GetMaxEjectionPercent returns the MaxEjectionPercent field value if set, zero value otherwise.
func (o *ClusterOutlierDetectionType) GetMaxEjectionPercent() int64 {
	if o == nil || IsNil(o.MaxEjectionPercent) {
		var ret int64
		return ret
	}
	return *o.MaxEjectionPercent
}

// GetMaxEjectionPercentOk returns a tuple with the MaxEjectionPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterOutlierDetectionType) GetMaxEjectionPercentOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxEjectionPercent) {
		return nil, false
	}
	return o.MaxEjectionPercent, true
}

// HasMaxEjectionPercent returns a boolean if a field has been set.
func (o *ClusterOutlierDetectionType) HasMaxEjectionPercent() bool {
	if o != nil && !IsNil(o.MaxEjectionPercent) {
		return true
	}

	return false
}

// SetMaxEjectionPercent gets a reference to the given int64 and assigns it to the MaxEjectionPercent field.
func (o *ClusterOutlierDetectionType) SetMaxEjectionPercent(v int64) {
	o.MaxEjectionPercent = &v
}

func (o ClusterOutlierDetectionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterOutlierDetectionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseEjectionTime) {
		toSerialize["base_ejection_time"] = o.BaseEjectionTime
	}
	if !IsNil(o.Consecutive5xx) {
		toSerialize["consecutive_5xx"] = o.Consecutive5xx
	}
	if !IsNil(o.ConsecutiveGatewayFailure) {
		toSerialize["consecutive_gateway_failure"] = o.ConsecutiveGatewayFailure
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.MaxEjectionPercent) {
		toSerialize["max_ejection_percent"] = o.MaxEjectionPercent
	}
	return toSerialize, nil
}

type NullableClusterOutlierDetectionType struct {
	value *ClusterOutlierDetectionType
	isSet bool
}

func (v NullableClusterOutlierDetectionType) Get() *ClusterOutlierDetectionType {
	return v.value
}

func (v *NullableClusterOutlierDetectionType) Set(val *ClusterOutlierDetectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterOutlierDetectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterOutlierDetectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterOutlierDetectionType(val *ClusterOutlierDetectionType) *NullableClusterOutlierDetectionType {
	return &NullableClusterOutlierDetectionType{value: val, isSet: true}
}

func (v NullableClusterOutlierDetectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterOutlierDetectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


