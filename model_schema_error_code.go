/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SchemaErrorCode Union of all possible error-codes from system   - EOK: No error  - EPERMS: Permissions error  - EBADINPUT: Input is not correct  - ENOTFOUND: Not found  - EEXISTS: Already exists  - EUNKNOWN: Unknown/catchall error  - ESERIALIZE: Error in serializing/de-serializing  - EINTERNAL: Server error  - EPARTIAL: Partial error
type SchemaErrorCode string

// List of schemaErrorCode
const (
	EOK SchemaErrorCode = "EOK"
	EPERMS SchemaErrorCode = "EPERMS"
	EBADINPUT SchemaErrorCode = "EBADINPUT"
	ENOTFOUND SchemaErrorCode = "ENOTFOUND"
	EEXISTS SchemaErrorCode = "EEXISTS"
	EUNKNOWN SchemaErrorCode = "EUNKNOWN"
	ESERIALIZE SchemaErrorCode = "ESERIALIZE"
	EINTERNAL SchemaErrorCode = "EINTERNAL"
	EPARTIAL SchemaErrorCode = "EPARTIAL"
)

// All allowed values of SchemaErrorCode enum
var AllowedSchemaErrorCodeEnumValues = []SchemaErrorCode{
	"EOK",
	"EPERMS",
	"EBADINPUT",
	"ENOTFOUND",
	"EEXISTS",
	"EUNKNOWN",
	"ESERIALIZE",
	"EINTERNAL",
	"EPARTIAL",
}

func (v *SchemaErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaErrorCode(value)
	for _, existing := range AllowedSchemaErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaErrorCode", value)
}

// NewSchemaErrorCodeFromValue returns a pointer to a valid SchemaErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaErrorCodeFromValue(v string) (*SchemaErrorCode, error) {
	ev := SchemaErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaErrorCode: valid values are %v", v, AllowedSchemaErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaErrorCode) IsValid() bool {
	for _, existing := range AllowedSchemaErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to schemaErrorCode value
func (v SchemaErrorCode) Ptr() *SchemaErrorCode {
	return &v
}

type NullableSchemaErrorCode struct {
	value *SchemaErrorCode
	isSet bool
}

func (v NullableSchemaErrorCode) Get() *SchemaErrorCode {
	return v.value
}

func (v *NullableSchemaErrorCode) Set(val *SchemaErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaErrorCode(val *SchemaErrorCode) *NullableSchemaErrorCode {
	return &NullableSchemaErrorCode{value: val, isSet: true}
}

func (v NullableSchemaErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

