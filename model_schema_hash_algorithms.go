/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaHashAlgorithms type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaHashAlgorithms{}

// SchemaHashAlgorithms Specifies the hash algorithms to be used
type SchemaHashAlgorithms struct {
	//  Ordered list of hash algorithms to be used.  Required: YES  Validation Rules:   ves.io.schema.rules.message.required: true   ves.io.schema.rules.repeated.max_items: 4   ves.io.schema.rules.repeated.min_items: 1   ves.io.schema.rules.repeated.unique: true 
	HashAlgorithms []SchemaHashAlgorithm `json:"hash_algorithms,omitempty"`
}

// NewSchemaHashAlgorithms instantiates a new SchemaHashAlgorithms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaHashAlgorithms() *SchemaHashAlgorithms {
	this := SchemaHashAlgorithms{}
	return &this
}

// NewSchemaHashAlgorithmsWithDefaults instantiates a new SchemaHashAlgorithms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaHashAlgorithmsWithDefaults() *SchemaHashAlgorithms {
	this := SchemaHashAlgorithms{}
	return &this
}

// GetHashAlgorithms returns the HashAlgorithms field value if set, zero value otherwise.
func (o *SchemaHashAlgorithms) GetHashAlgorithms() []SchemaHashAlgorithm {
	if o == nil || IsNil(o.HashAlgorithms) {
		var ret []SchemaHashAlgorithm
		return ret
	}
	return o.HashAlgorithms
}

// GetHashAlgorithmsOk returns a tuple with the HashAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaHashAlgorithms) GetHashAlgorithmsOk() ([]SchemaHashAlgorithm, bool) {
	if o == nil || IsNil(o.HashAlgorithms) {
		return nil, false
	}
	return o.HashAlgorithms, true
}

// HasHashAlgorithms returns a boolean if a field has been set.
func (o *SchemaHashAlgorithms) HasHashAlgorithms() bool {
	if o != nil && !IsNil(o.HashAlgorithms) {
		return true
	}

	return false
}

// SetHashAlgorithms gets a reference to the given []SchemaHashAlgorithm and assigns it to the HashAlgorithms field.
func (o *SchemaHashAlgorithms) SetHashAlgorithms(v []SchemaHashAlgorithm) {
	o.HashAlgorithms = v
}

func (o SchemaHashAlgorithms) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaHashAlgorithms) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HashAlgorithms) {
		toSerialize["hash_algorithms"] = o.HashAlgorithms
	}
	return toSerialize, nil
}

type NullableSchemaHashAlgorithms struct {
	value *SchemaHashAlgorithms
	isSet bool
}

func (v NullableSchemaHashAlgorithms) Get() *SchemaHashAlgorithms {
	return v.value
}

func (v *NullableSchemaHashAlgorithms) Set(val *SchemaHashAlgorithms) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaHashAlgorithms) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaHashAlgorithms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaHashAlgorithms(val *SchemaHashAlgorithms) *NullableSchemaHashAlgorithms {
	return &NullableSchemaHashAlgorithms{value: val, isSet: true}
}

func (v NullableSchemaHashAlgorithms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaHashAlgorithms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


