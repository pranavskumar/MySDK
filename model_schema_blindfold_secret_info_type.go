/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaBlindfoldSecretInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaBlindfoldSecretInfoType{}

// SchemaBlindfoldSecretInfoType BlindfoldSecretInfoType specifies information about the Secret managed by F5XC Secret Management
type SchemaBlindfoldSecretInfoType struct {
	//  Name of the Secret Management Access object that contains information about the backend Secret Management service.  Example: ` \"value\"`
	DecryptionProvider *string `json:"decryption_provider,omitempty"`
	//  Location is the uri_ref. It could be in url format for string:///  Or it could be a path if the store provider is an http/https location  Example: ` \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"`  Required: YES  Validation Rules:   ves.io.schema.rules.message.required: true   ves.io.schema.rules.string.uri_ref: true 
	Location *string `json:"location,omitempty"`
	//  Name of the Secret Management Access object that contains information about the store to get encrypted bytes  This field needs to be provided only if the url scheme is not string:///  Example: ` \"value\"`
	StoreProvider *string `json:"store_provider,omitempty"`
}

// NewSchemaBlindfoldSecretInfoType instantiates a new SchemaBlindfoldSecretInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaBlindfoldSecretInfoType() *SchemaBlindfoldSecretInfoType {
	this := SchemaBlindfoldSecretInfoType{}
	return &this
}

// NewSchemaBlindfoldSecretInfoTypeWithDefaults instantiates a new SchemaBlindfoldSecretInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaBlindfoldSecretInfoTypeWithDefaults() *SchemaBlindfoldSecretInfoType {
	this := SchemaBlindfoldSecretInfoType{}
	return &this
}

// GetDecryptionProvider returns the DecryptionProvider field value if set, zero value otherwise.
func (o *SchemaBlindfoldSecretInfoType) GetDecryptionProvider() string {
	if o == nil || IsNil(o.DecryptionProvider) {
		var ret string
		return ret
	}
	return *o.DecryptionProvider
}

// GetDecryptionProviderOk returns a tuple with the DecryptionProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBlindfoldSecretInfoType) GetDecryptionProviderOk() (*string, bool) {
	if o == nil || IsNil(o.DecryptionProvider) {
		return nil, false
	}
	return o.DecryptionProvider, true
}

// HasDecryptionProvider returns a boolean if a field has been set.
func (o *SchemaBlindfoldSecretInfoType) HasDecryptionProvider() bool {
	if o != nil && !IsNil(o.DecryptionProvider) {
		return true
	}

	return false
}

// SetDecryptionProvider gets a reference to the given string and assigns it to the DecryptionProvider field.
func (o *SchemaBlindfoldSecretInfoType) SetDecryptionProvider(v string) {
	o.DecryptionProvider = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SchemaBlindfoldSecretInfoType) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBlindfoldSecretInfoType) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SchemaBlindfoldSecretInfoType) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *SchemaBlindfoldSecretInfoType) SetLocation(v string) {
	o.Location = &v
}

// GetStoreProvider returns the StoreProvider field value if set, zero value otherwise.
func (o *SchemaBlindfoldSecretInfoType) GetStoreProvider() string {
	if o == nil || IsNil(o.StoreProvider) {
		var ret string
		return ret
	}
	return *o.StoreProvider
}

// GetStoreProviderOk returns a tuple with the StoreProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBlindfoldSecretInfoType) GetStoreProviderOk() (*string, bool) {
	if o == nil || IsNil(o.StoreProvider) {
		return nil, false
	}
	return o.StoreProvider, true
}

// HasStoreProvider returns a boolean if a field has been set.
func (o *SchemaBlindfoldSecretInfoType) HasStoreProvider() bool {
	if o != nil && !IsNil(o.StoreProvider) {
		return true
	}

	return false
}

// SetStoreProvider gets a reference to the given string and assigns it to the StoreProvider field.
func (o *SchemaBlindfoldSecretInfoType) SetStoreProvider(v string) {
	o.StoreProvider = &v
}

func (o SchemaBlindfoldSecretInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaBlindfoldSecretInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DecryptionProvider) {
		toSerialize["decryption_provider"] = o.DecryptionProvider
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.StoreProvider) {
		toSerialize["store_provider"] = o.StoreProvider
	}
	return toSerialize, nil
}

type NullableSchemaBlindfoldSecretInfoType struct {
	value *SchemaBlindfoldSecretInfoType
	isSet bool
}

func (v NullableSchemaBlindfoldSecretInfoType) Get() *SchemaBlindfoldSecretInfoType {
	return v.value
}

func (v *NullableSchemaBlindfoldSecretInfoType) Set(val *SchemaBlindfoldSecretInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaBlindfoldSecretInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaBlindfoldSecretInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaBlindfoldSecretInfoType(val *SchemaBlindfoldSecretInfoType) *NullableSchemaBlindfoldSecretInfoType {
	return &NullableSchemaBlindfoldSecretInfoType{value: val, isSet: true}
}

func (v NullableSchemaBlindfoldSecretInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaBlindfoldSecretInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


