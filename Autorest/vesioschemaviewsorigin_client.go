//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/go@4.0.0-preview.63)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// VesIoSchemaViewsOriginClient contains the methods for the VesIoSchemaViewsOrigin group.
// Don't use this type directly, use a constructor function instead.
type VesIoSchemaViewsOriginClient struct {
	internal *azcore.Client
}

// PoolAPICreate - Shape of the origin pool create specification
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 
//   - metadataNamespace - namespace
//     x-example: "staging" This defines the workspace within which each the configuration object is to be created. Must be a
//     DNS_LABEL format. For a namespace object itself, namespace value will be ""
//   - options - VesIoSchemaViewsOriginClientPoolAPICreateOptions contains the optional parameters for the VesIoSchemaViewsOriginClient.PoolAPICreate
//     method.
func (client *VesIoSchemaViewsOriginClient) PoolAPICreate(ctx context.Context, metadataNamespace string, body OriginPoolCreateRequest, options *VesIoSchemaViewsOriginClientPoolAPICreateOptions) (VesIoSchemaViewsOriginClientPoolAPICreateResponse, error) {
	var err error
	req, err := client.poolAPICreateCreateRequest(ctx, metadataNamespace, body, options)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusConflict, http.StatusTooManyRequests, http.StatusInternalServerError, http.StatusServiceUnavailable, http.StatusGatewayTimeout ) {
		err = runtime.NewResponseError(httpResp)
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	resp, err := client.poolAPICreateHandleResponse(httpResp)
	return resp, err
}

// poolAPICreateCreateRequest creates the PoolAPICreate request.
func (client *VesIoSchemaViewsOriginClient) poolAPICreateCreateRequest(ctx context.Context, metadataNamespace string, body OriginPoolCreateRequest, options *VesIoSchemaViewsOriginClientPoolAPICreateOptions) (*policy.Request, error) {
	urlPath := "/api/config/namespaces/{metadata.namespace}/origin_pools"
	if metadataNamespace == "" {
		return nil, errors.New("parameter metadataNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{metadata.namespace}", url.PathEscape(metadataNamespace))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
	return nil, err
}
	return req, nil
}

// poolAPICreateHandleResponse handles the PoolAPICreate response.
func (client *VesIoSchemaViewsOriginClient) poolAPICreateHandleResponse(resp *http.Response) (VesIoSchemaViewsOriginClientPoolAPICreateResponse, error) {
	result := VesIoSchemaViewsOriginClientPoolAPICreateResponse{}
	switch resp.StatusCode {
	case http.StatusOK:
	var val OriginPoolCreateResponse
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	result.Value = val
	case http.StatusUnauthorized:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	result.Value = val
	case http.StatusForbidden:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	result.Value = val
	case http.StatusNotFound:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	result.Value = val
	case http.StatusConflict:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	result.Value = val
	case http.StatusTooManyRequests:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	result.Value = val
	case http.StatusInternalServerError:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	result.Value = val
	case http.StatusServiceUnavailable:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	result.Value = val
	case http.StatusGatewayTimeout :
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, err
	}
	result.Value = val
	default:
		return VesIoSchemaViewsOriginClientPoolAPICreateResponse{}, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
	return result, nil
}

// PoolAPIDelete - Delete the specified origin_pool
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 
//   - namespace - namespace
//     x-example: "ns1" Namespace in which the configuration object is present
//   - name - name
//     x-example: "name" Name of the configuration object
//   - options - VesIoSchemaViewsOriginClientPoolAPIDeleteOptions contains the optional parameters for the VesIoSchemaViewsOriginClient.PoolAPIDelete
//     method.
func (client *VesIoSchemaViewsOriginClient) PoolAPIDelete(ctx context.Context, namespace string, name string, body OriginPoolDeleteRequest, options *VesIoSchemaViewsOriginClientPoolAPIDeleteOptions) (VesIoSchemaViewsOriginClientPoolAPIDeleteResponse, error) {
	var err error
	req, err := client.poolAPIDeleteCreateRequest(ctx, namespace, name, body, options)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusConflict, http.StatusTooManyRequests, http.StatusInternalServerError, http.StatusServiceUnavailable, http.StatusGatewayTimeout ) {
		err = runtime.NewResponseError(httpResp)
		return VesIoSchemaViewsOriginClientPoolAPIDeleteResponse{}, err
	}
	resp, err := client.poolAPIDeleteHandleResponse(httpResp)
	return resp, err
}

// poolAPIDeleteCreateRequest creates the PoolAPIDelete request.
func (client *VesIoSchemaViewsOriginClient) poolAPIDeleteCreateRequest(ctx context.Context, namespace string, name string, body OriginPoolDeleteRequest, options *VesIoSchemaViewsOriginClientPoolAPIDeleteOptions) (*policy.Request, error) {
	urlPath := "/api/config/namespaces/{namespace}/origin_pools/{name}"
	if namespace == "" {
		return nil, errors.New("parameter namespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{namespace}", url.PathEscape(namespace))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
	return nil, err
}
	return req, nil
}

// poolAPIDeleteHandleResponse handles the PoolAPIDelete response.
func (client *VesIoSchemaViewsOriginClient) poolAPIDeleteHandleResponse(resp *http.Response) (VesIoSchemaViewsOriginClientPoolAPIDeleteResponse, error) {
	result := VesIoSchemaViewsOriginClientPoolAPIDeleteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIDeleteResponse{}, err
	}
	return result, nil
}

// PoolAPIGet - Shape of the origin pool get specification
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 
//   - namespace - namespace
//     x-example: "ns1" The namespace in which the configuration object is present
//   - name - name
//     x-example: "name" The name of the configuration object to be fetched
//   - options - VesIoSchemaViewsOriginClientPoolAPIGetOptions contains the optional parameters for the VesIoSchemaViewsOriginClient.PoolAPIGet
//     method.
func (client *VesIoSchemaViewsOriginClient) PoolAPIGet(ctx context.Context, namespace string, name string, options *VesIoSchemaViewsOriginClientPoolAPIGetOptions) (VesIoSchemaViewsOriginClientPoolAPIGetResponse, error) {
	var err error
	req, err := client.poolAPIGetCreateRequest(ctx, namespace, name, options)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusConflict, http.StatusTooManyRequests, http.StatusInternalServerError, http.StatusServiceUnavailable, http.StatusGatewayTimeout ) {
		err = runtime.NewResponseError(httpResp)
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	resp, err := client.poolAPIGetHandleResponse(httpResp)
	return resp, err
}

// poolAPIGetCreateRequest creates the PoolAPIGet request.
func (client *VesIoSchemaViewsOriginClient) poolAPIGetCreateRequest(ctx context.Context, namespace string, name string, options *VesIoSchemaViewsOriginClientPoolAPIGetOptions) (*policy.Request, error) {
	urlPath := "/api/config/namespaces/{namespace}/origin_pools/{name}"
	if namespace == "" {
		return nil, errors.New("parameter namespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{namespace}", url.PathEscape(namespace))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ResponseFormat != nil {
		reqQP.Set("response_format", string(*options.ResponseFormat))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// poolAPIGetHandleResponse handles the PoolAPIGet response.
func (client *VesIoSchemaViewsOriginClient) poolAPIGetHandleResponse(resp *http.Response) (VesIoSchemaViewsOriginClientPoolAPIGetResponse, error) {
	result := VesIoSchemaViewsOriginClientPoolAPIGetResponse{}
	switch resp.StatusCode {
	case http.StatusOK:
	var val OriginPoolGetResponse
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	result.Value = val
	case http.StatusUnauthorized:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	result.Value = val
	case http.StatusForbidden:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	result.Value = val
	case http.StatusNotFound:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	result.Value = val
	case http.StatusConflict:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	result.Value = val
	case http.StatusTooManyRequests:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	result.Value = val
	case http.StatusInternalServerError:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	result.Value = val
	case http.StatusServiceUnavailable:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	result.Value = val
	case http.StatusGatewayTimeout :
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, err
	}
	result.Value = val
	default:
		return VesIoSchemaViewsOriginClientPoolAPIGetResponse{}, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
	return result, nil
}

// PoolAPIList - List the set of origin_pool in a namespace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 
//   - namespace - namespace
//     x-example: "ns1" Namespace to scope the listing of origin_pool
//   - options - VesIoSchemaViewsOriginClientPoolAPIListOptions contains the optional parameters for the VesIoSchemaViewsOriginClient.PoolAPIList
//     method.
func (client *VesIoSchemaViewsOriginClient) PoolAPIList(ctx context.Context, namespace string, options *VesIoSchemaViewsOriginClientPoolAPIListOptions) (VesIoSchemaViewsOriginClientPoolAPIListResponse, error) {
	var err error
	req, err := client.poolAPIListCreateRequest(ctx, namespace, options)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusConflict, http.StatusTooManyRequests, http.StatusInternalServerError, http.StatusServiceUnavailable, http.StatusGatewayTimeout ) {
		err = runtime.NewResponseError(httpResp)
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	resp, err := client.poolAPIListHandleResponse(httpResp)
	return resp, err
}

// poolAPIListCreateRequest creates the PoolAPIList request.
func (client *VesIoSchemaViewsOriginClient) poolAPIListCreateRequest(ctx context.Context, namespace string, options *VesIoSchemaViewsOriginClientPoolAPIListOptions) (*policy.Request, error) {
	urlPath := "/api/config/namespaces/{namespace}/origin_pools"
	if namespace == "" {
		return nil, errors.New("parameter namespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{namespace}", url.PathEscape(namespace))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.LabelFilter != nil {
		reqQP.Set("label_filter", *options.LabelFilter)
	}
	if options != nil && options.ReportFields != nil {
		reqQP.Set("report_fields", options.ReportFields)
	}
	if options != nil && options.ReportStatusFields != nil {
		reqQP.Set("report_status_fields", options.ReportStatusFields)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// poolAPIListHandleResponse handles the PoolAPIList response.
func (client *VesIoSchemaViewsOriginClient) poolAPIListHandleResponse(resp *http.Response) (VesIoSchemaViewsOriginClientPoolAPIListResponse, error) {
	result := VesIoSchemaViewsOriginClientPoolAPIListResponse{}
	switch resp.StatusCode {
	case http.StatusOK:
	var val OriginPoolListResponse
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	result.Value = val
	case http.StatusUnauthorized:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	result.Value = val
	case http.StatusForbidden:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	result.Value = val
	case http.StatusNotFound:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	result.Value = val
	case http.StatusConflict:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	result.Value = val
	case http.StatusTooManyRequests:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	result.Value = val
	case http.StatusInternalServerError:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	result.Value = val
	case http.StatusServiceUnavailable:
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	result.Value = val
	case http.StatusGatewayTimeout :
	var val any
	if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, err
	}
	result.Value = val
	default:
		return VesIoSchemaViewsOriginClientPoolAPIListResponse{}, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
	return result, nil
}

// PoolAPIReplace - Shape of the origin pool create specification
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 
//   - metadataNamespace - namespace
//     x-example: "staging" This defines the workspace within which each the configuration object is to be created. Must be a
//     DNS_LABEL format. For a namespace object itself, namespace value will be ""
//   - metadataName - name
//     x-example: "acmecorp-web" The configuration object to be replaced will be looked up by name
//   - options - VesIoSchemaViewsOriginClientPoolAPIReplaceOptions contains the optional parameters for the VesIoSchemaViewsOriginClient.PoolAPIReplace
//     method.
func (client *VesIoSchemaViewsOriginClient) PoolAPIReplace(ctx context.Context, metadataNamespace string, metadataName string, body OriginPoolReplaceRequest, options *VesIoSchemaViewsOriginClientPoolAPIReplaceOptions) (VesIoSchemaViewsOriginClientPoolAPIReplaceResponse, error) {
	var err error
	req, err := client.poolAPIReplaceCreateRequest(ctx, metadataNamespace, metadataName, body, options)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIReplaceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIReplaceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusConflict, http.StatusTooManyRequests, http.StatusInternalServerError, http.StatusServiceUnavailable, http.StatusGatewayTimeout ) {
		err = runtime.NewResponseError(httpResp)
		return VesIoSchemaViewsOriginClientPoolAPIReplaceResponse{}, err
	}
	resp, err := client.poolAPIReplaceHandleResponse(httpResp)
	return resp, err
}

// poolAPIReplaceCreateRequest creates the PoolAPIReplace request.
func (client *VesIoSchemaViewsOriginClient) poolAPIReplaceCreateRequest(ctx context.Context, metadataNamespace string, metadataName string, body OriginPoolReplaceRequest, options *VesIoSchemaViewsOriginClientPoolAPIReplaceOptions) (*policy.Request, error) {
	urlPath := "/api/config/namespaces/{metadata.namespace}/origin_pools/{metadata.name}"
	if metadataNamespace == "" {
		return nil, errors.New("parameter metadataNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{metadata.namespace}", url.PathEscape(metadataNamespace))
	if metadataName == "" {
		return nil, errors.New("parameter metadataName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{metadata.name}", url.PathEscape(metadataName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
	return nil, err
}
	return req, nil
}

// poolAPIReplaceHandleResponse handles the PoolAPIReplace response.
func (client *VesIoSchemaViewsOriginClient) poolAPIReplaceHandleResponse(resp *http.Response) (VesIoSchemaViewsOriginClientPoolAPIReplaceResponse, error) {
	result := VesIoSchemaViewsOriginClientPoolAPIReplaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return VesIoSchemaViewsOriginClientPoolAPIReplaceResponse{}, err
	}
	return result, nil
}

