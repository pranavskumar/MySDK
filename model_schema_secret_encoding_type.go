/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SchemaSecretEncodingType x-displayName: \"Secret Encoding\" SecretEncodingType defines the encoding type of the secret before handled by the Secret Management Service.   - EncodingNone: x-displayName: \"None\" No Encoding  - EncodingBase64: Base64  x-displayName: \"Base64\" Base64 encoding
type SchemaSecretEncodingType string

// List of schemaSecretEncodingType
const (
	ENCODING_NONE SchemaSecretEncodingType = "EncodingNone"
	ENCODING_BASE64 SchemaSecretEncodingType = "EncodingBase64"
)

// All allowed values of SchemaSecretEncodingType enum
var AllowedSchemaSecretEncodingTypeEnumValues = []SchemaSecretEncodingType{
	"EncodingNone",
	"EncodingBase64",
}

func (v *SchemaSecretEncodingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaSecretEncodingType(value)
	for _, existing := range AllowedSchemaSecretEncodingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaSecretEncodingType", value)
}

// NewSchemaSecretEncodingTypeFromValue returns a pointer to a valid SchemaSecretEncodingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaSecretEncodingTypeFromValue(v string) (*SchemaSecretEncodingType, error) {
	ev := SchemaSecretEncodingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaSecretEncodingType: valid values are %v", v, AllowedSchemaSecretEncodingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaSecretEncodingType) IsValid() bool {
	for _, existing := range AllowedSchemaSecretEncodingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to schemaSecretEncodingType value
func (v SchemaSecretEncodingType) Ptr() *SchemaSecretEncodingType {
	return &v
}

type NullableSchemaSecretEncodingType struct {
	value *SchemaSecretEncodingType
	isSet bool
}

func (v NullableSchemaSecretEncodingType) Get() *SchemaSecretEncodingType {
	return v.value
}

func (v *NullableSchemaSecretEncodingType) Set(val *SchemaSecretEncodingType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaSecretEncodingType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaSecretEncodingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaSecretEncodingType(val *SchemaSecretEncodingType) *NullableSchemaSecretEncodingType {
	return &NullableSchemaSecretEncodingType{value: val, isSet: true}
}

func (v NullableSchemaSecretEncodingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaSecretEncodingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

