/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaInitializerType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaInitializerType{}

// SchemaInitializerType Initializer is information about an initializer that has not yet completed.
type SchemaInitializerType struct {
	//  name of the service that is responsible for initializing this object.
	Name *string `json:"name,omitempty"`
}

// NewSchemaInitializerType instantiates a new SchemaInitializerType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaInitializerType() *SchemaInitializerType {
	this := SchemaInitializerType{}
	return &this
}

// NewSchemaInitializerTypeWithDefaults instantiates a new SchemaInitializerType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaInitializerTypeWithDefaults() *SchemaInitializerType {
	this := SchemaInitializerType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaInitializerType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaInitializerType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaInitializerType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchemaInitializerType) SetName(v string) {
	o.Name = &v
}

func (o SchemaInitializerType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaInitializerType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableSchemaInitializerType struct {
	value *SchemaInitializerType
	isSet bool
}

func (v NullableSchemaInitializerType) Get() *SchemaInitializerType {
	return v.value
}

func (v *NullableSchemaInitializerType) Set(val *SchemaInitializerType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaInitializerType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaInitializerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaInitializerType(val *SchemaInitializerType) *NullableSchemaInitializerType {
	return &NullableSchemaInitializerType{value: val, isSet: true}
}

func (v NullableSchemaInitializerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaInitializerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


