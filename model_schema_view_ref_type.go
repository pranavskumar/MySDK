/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaViewRefType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaViewRefType{}

// SchemaViewRefType ViewRefType represents a reference to a view
type SchemaViewRefType struct {
	//  Kind of the view object  Example: ` \"http_proxy\"`
	Kind *string `json:"kind,omitempty"`
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then name will hold the referred object's(e.g. route's) name.  Example: ` \"contactus-route\"`
	Name *string `json:"name,omitempty"`
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then namespace will hold the referred object's(e.g. route's) namespace.  Example: ` \"ns1\"`
	Namespace *string `json:"namespace,omitempty"`
	//  UID of the view object  Example: ` \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"`
	Uid *string `json:"uid,omitempty"`
}

// NewSchemaViewRefType instantiates a new SchemaViewRefType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaViewRefType() *SchemaViewRefType {
	this := SchemaViewRefType{}
	return &this
}

// NewSchemaViewRefTypeWithDefaults instantiates a new SchemaViewRefType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaViewRefTypeWithDefaults() *SchemaViewRefType {
	this := SchemaViewRefType{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *SchemaViewRefType) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaViewRefType) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *SchemaViewRefType) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *SchemaViewRefType) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaViewRefType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaViewRefType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaViewRefType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchemaViewRefType) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *SchemaViewRefType) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaViewRefType) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *SchemaViewRefType) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *SchemaViewRefType) SetNamespace(v string) {
	o.Namespace = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *SchemaViewRefType) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaViewRefType) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *SchemaViewRefType) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *SchemaViewRefType) SetUid(v string) {
	o.Uid = &v
}

func (o SchemaViewRefType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaViewRefType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

type NullableSchemaViewRefType struct {
	value *SchemaViewRefType
	isSet bool
}

func (v NullableSchemaViewRefType) Get() *SchemaViewRefType {
	return v.value
}

func (v *NullableSchemaViewRefType) Set(val *SchemaViewRefType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaViewRefType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaViewRefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaViewRefType(val *SchemaViewRefType) *NullableSchemaViewRefType {
	return &NullableSchemaViewRefType{value: val, isSet: true}
}

func (v NullableSchemaViewRefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaViewRefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


