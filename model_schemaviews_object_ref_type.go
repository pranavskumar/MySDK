/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaviewsObjectRefType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaviewsObjectRefType{}

// SchemaviewsObjectRefType This type establishes a direct reference from one object(the referrer) to another(the referred). Such a reference is in form of tenant/namespace/name
type SchemaviewsObjectRefType struct {
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then name will hold the referred object's(e.g. route's) name.  Example: ` \"contacts-route\"`  Required: YES  Validation Rules:   ves.io.schema.rules.message.required: true   ves.io.schema.rules.string.max_bytes: 128   ves.io.schema.rules.string.min_bytes: 1 
	Name *string `json:"name,omitempty"`
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then namespace will hold the referred object's(e.g. route's) namespace.  Example: ` \"ns1\"`  Validation Rules:   ves.io.schema.rules.string.max_bytes: 64 
	Namespace *string `json:"namespace,omitempty"`
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then tenant will hold the referred object's(e.g. route's) tenant.  Example: ` \"acmecorp\"`  Validation Rules:   ves.io.schema.rules.string.max_bytes: 64 
	Tenant *string `json:"tenant,omitempty"`
}

// NewSchemaviewsObjectRefType instantiates a new SchemaviewsObjectRefType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaviewsObjectRefType() *SchemaviewsObjectRefType {
	this := SchemaviewsObjectRefType{}
	return &this
}

// NewSchemaviewsObjectRefTypeWithDefaults instantiates a new SchemaviewsObjectRefType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaviewsObjectRefTypeWithDefaults() *SchemaviewsObjectRefType {
	this := SchemaviewsObjectRefType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaviewsObjectRefType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaviewsObjectRefType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaviewsObjectRefType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchemaviewsObjectRefType) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *SchemaviewsObjectRefType) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaviewsObjectRefType) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *SchemaviewsObjectRefType) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *SchemaviewsObjectRefType) SetNamespace(v string) {
	o.Namespace = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *SchemaviewsObjectRefType) GetTenant() string {
	if o == nil || IsNil(o.Tenant) {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaviewsObjectRefType) GetTenantOk() (*string, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *SchemaviewsObjectRefType) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *SchemaviewsObjectRefType) SetTenant(v string) {
	o.Tenant = &v
}

func (o SchemaviewsObjectRefType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaviewsObjectRefType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	return toSerialize, nil
}

type NullableSchemaviewsObjectRefType struct {
	value *SchemaviewsObjectRefType
	isSet bool
}

func (v NullableSchemaviewsObjectRefType) Get() *SchemaviewsObjectRefType {
	return v.value
}

func (v *NullableSchemaviewsObjectRefType) Set(val *SchemaviewsObjectRefType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaviewsObjectRefType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaviewsObjectRefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaviewsObjectRefType(val *SchemaviewsObjectRefType) *NullableSchemaviewsObjectRefType {
	return &NullableSchemaviewsObjectRefType{value: val, isSet: true}
}

func (v NullableSchemaviewsObjectRefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaviewsObjectRefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


