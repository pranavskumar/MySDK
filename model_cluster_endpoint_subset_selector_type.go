/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClusterEndpointSubsetSelectorType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterEndpointSubsetSelectorType{}

// ClusterEndpointSubsetSelectorType Upstream cluster may be configured to divide its endpoints into subsets based on metadata attached to the endpoints. Routes may then specify the metadata that a endpoint must match in order to be selected by the load balancer. List of keys that define a cluster subset. Each endpoint that has a metadata value for all of the keys in the definition is added to that subset. If no endpoint has all the keys, no subsets result from the definition. A single endpoint may appear in multiple subsets if it matches multiple definitions.
type ClusterEndpointSubsetSelectorType struct {
	//  List of keys that define a cluster subset class.  Example: ` \"production\"`  Required: YES  Validation Rules:   ves.io.schema.rules.message.required: true   ves.io.schema.rules.repeated.items.string.not_empty: true   ves.io.schema.rules.repeated.max_items: 16 
	Keys []string `json:"keys,omitempty"`
}

// NewClusterEndpointSubsetSelectorType instantiates a new ClusterEndpointSubsetSelectorType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterEndpointSubsetSelectorType() *ClusterEndpointSubsetSelectorType {
	this := ClusterEndpointSubsetSelectorType{}
	return &this
}

// NewClusterEndpointSubsetSelectorTypeWithDefaults instantiates a new ClusterEndpointSubsetSelectorType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterEndpointSubsetSelectorTypeWithDefaults() *ClusterEndpointSubsetSelectorType {
	this := ClusterEndpointSubsetSelectorType{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *ClusterEndpointSubsetSelectorType) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterEndpointSubsetSelectorType) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *ClusterEndpointSubsetSelectorType) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *ClusterEndpointSubsetSelectorType) SetKeys(v []string) {
	o.Keys = v
}

func (o ClusterEndpointSubsetSelectorType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterEndpointSubsetSelectorType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableClusterEndpointSubsetSelectorType struct {
	value *ClusterEndpointSubsetSelectorType
	isSet bool
}

func (v NullableClusterEndpointSubsetSelectorType) Get() *ClusterEndpointSubsetSelectorType {
	return v.value
}

func (v *NullableClusterEndpointSubsetSelectorType) Set(val *ClusterEndpointSubsetSelectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterEndpointSubsetSelectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterEndpointSubsetSelectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterEndpointSubsetSelectorType(val *ClusterEndpointSubsetSelectorType) *NullableClusterEndpointSubsetSelectorType {
	return &NullableClusterEndpointSubsetSelectorType{value: val, isSet: true}
}

func (v NullableClusterEndpointSubsetSelectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterEndpointSubsetSelectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


