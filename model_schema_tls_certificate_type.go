/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaTlsCertificateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaTlsCertificateType{}

// SchemaTlsCertificateType Handle to fetch certificate and key
type SchemaTlsCertificateType struct {
	//  TLS certificate.  Certificate or certificate chain in PEM format including the PEM headers.  Example: ` \"value\"`  Required: YES  Validation Rules:   ves.io.schema.rules.message.required: true   ves.io.schema.rules.string.certificate_url: true   ves.io.schema.rules.string.max_bytes: 131072   ves.io.schema.rules.string.min_bytes: 1 
	CertificateUrl *string `json:"certificate_url,omitempty"`
	CustomHashAlgorithms *SchemaHashAlgorithms `json:"custom_hash_algorithms,omitempty"`
	//  Description for the certificate  Example: ` \"Certificate used in production environment\"`
	Description *string `json:"description,omitempty"`
	// This can be used for messages where no values are needed
	DisableOcspStapling map[string]interface{} `json:"disable_ocsp_stapling,omitempty"`
	PrivateKey *SchemaSecretType `json:"private_key,omitempty"`
	// This can be used for messages where no values are needed
	UseSystemDefaults map[string]interface{} `json:"use_system_defaults,omitempty"`
}

// NewSchemaTlsCertificateType instantiates a new SchemaTlsCertificateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaTlsCertificateType() *SchemaTlsCertificateType {
	this := SchemaTlsCertificateType{}
	return &this
}

// NewSchemaTlsCertificateTypeWithDefaults instantiates a new SchemaTlsCertificateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaTlsCertificateTypeWithDefaults() *SchemaTlsCertificateType {
	this := SchemaTlsCertificateType{}
	return &this
}

// GetCertificateUrl returns the CertificateUrl field value if set, zero value otherwise.
func (o *SchemaTlsCertificateType) GetCertificateUrl() string {
	if o == nil || IsNil(o.CertificateUrl) {
		var ret string
		return ret
	}
	return *o.CertificateUrl
}

// GetCertificateUrlOk returns a tuple with the CertificateUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTlsCertificateType) GetCertificateUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateUrl) {
		return nil, false
	}
	return o.CertificateUrl, true
}

// HasCertificateUrl returns a boolean if a field has been set.
func (o *SchemaTlsCertificateType) HasCertificateUrl() bool {
	if o != nil && !IsNil(o.CertificateUrl) {
		return true
	}

	return false
}

// SetCertificateUrl gets a reference to the given string and assigns it to the CertificateUrl field.
func (o *SchemaTlsCertificateType) SetCertificateUrl(v string) {
	o.CertificateUrl = &v
}

// GetCustomHashAlgorithms returns the CustomHashAlgorithms field value if set, zero value otherwise.
func (o *SchemaTlsCertificateType) GetCustomHashAlgorithms() SchemaHashAlgorithms {
	if o == nil || IsNil(o.CustomHashAlgorithms) {
		var ret SchemaHashAlgorithms
		return ret
	}
	return *o.CustomHashAlgorithms
}

// GetCustomHashAlgorithmsOk returns a tuple with the CustomHashAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTlsCertificateType) GetCustomHashAlgorithmsOk() (*SchemaHashAlgorithms, bool) {
	if o == nil || IsNil(o.CustomHashAlgorithms) {
		return nil, false
	}
	return o.CustomHashAlgorithms, true
}

// HasCustomHashAlgorithms returns a boolean if a field has been set.
func (o *SchemaTlsCertificateType) HasCustomHashAlgorithms() bool {
	if o != nil && !IsNil(o.CustomHashAlgorithms) {
		return true
	}

	return false
}

// SetCustomHashAlgorithms gets a reference to the given SchemaHashAlgorithms and assigns it to the CustomHashAlgorithms field.
func (o *SchemaTlsCertificateType) SetCustomHashAlgorithms(v SchemaHashAlgorithms) {
	o.CustomHashAlgorithms = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaTlsCertificateType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTlsCertificateType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaTlsCertificateType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaTlsCertificateType) SetDescription(v string) {
	o.Description = &v
}

// GetDisableOcspStapling returns the DisableOcspStapling field value if set, zero value otherwise.
func (o *SchemaTlsCertificateType) GetDisableOcspStapling() map[string]interface{} {
	if o == nil || IsNil(o.DisableOcspStapling) {
		var ret map[string]interface{}
		return ret
	}
	return o.DisableOcspStapling
}

// GetDisableOcspStaplingOk returns a tuple with the DisableOcspStapling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTlsCertificateType) GetDisableOcspStaplingOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisableOcspStapling) {
		return map[string]interface{}{}, false
	}
	return o.DisableOcspStapling, true
}

// HasDisableOcspStapling returns a boolean if a field has been set.
func (o *SchemaTlsCertificateType) HasDisableOcspStapling() bool {
	if o != nil && !IsNil(o.DisableOcspStapling) {
		return true
	}

	return false
}

// SetDisableOcspStapling gets a reference to the given map[string]interface{} and assigns it to the DisableOcspStapling field.
func (o *SchemaTlsCertificateType) SetDisableOcspStapling(v map[string]interface{}) {
	o.DisableOcspStapling = v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *SchemaTlsCertificateType) GetPrivateKey() SchemaSecretType {
	if o == nil || IsNil(o.PrivateKey) {
		var ret SchemaSecretType
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTlsCertificateType) GetPrivateKeyOk() (*SchemaSecretType, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *SchemaTlsCertificateType) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given SchemaSecretType and assigns it to the PrivateKey field.
func (o *SchemaTlsCertificateType) SetPrivateKey(v SchemaSecretType) {
	o.PrivateKey = &v
}

// GetUseSystemDefaults returns the UseSystemDefaults field value if set, zero value otherwise.
func (o *SchemaTlsCertificateType) GetUseSystemDefaults() map[string]interface{} {
	if o == nil || IsNil(o.UseSystemDefaults) {
		var ret map[string]interface{}
		return ret
	}
	return o.UseSystemDefaults
}

// GetUseSystemDefaultsOk returns a tuple with the UseSystemDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTlsCertificateType) GetUseSystemDefaultsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UseSystemDefaults) {
		return map[string]interface{}{}, false
	}
	return o.UseSystemDefaults, true
}

// HasUseSystemDefaults returns a boolean if a field has been set.
func (o *SchemaTlsCertificateType) HasUseSystemDefaults() bool {
	if o != nil && !IsNil(o.UseSystemDefaults) {
		return true
	}

	return false
}

// SetUseSystemDefaults gets a reference to the given map[string]interface{} and assigns it to the UseSystemDefaults field.
func (o *SchemaTlsCertificateType) SetUseSystemDefaults(v map[string]interface{}) {
	o.UseSystemDefaults = v
}

func (o SchemaTlsCertificateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaTlsCertificateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateUrl) {
		toSerialize["certificate_url"] = o.CertificateUrl
	}
	if !IsNil(o.CustomHashAlgorithms) {
		toSerialize["custom_hash_algorithms"] = o.CustomHashAlgorithms
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisableOcspStapling) {
		toSerialize["disable_ocsp_stapling"] = o.DisableOcspStapling
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["private_key"] = o.PrivateKey
	}
	if !IsNil(o.UseSystemDefaults) {
		toSerialize["use_system_defaults"] = o.UseSystemDefaults
	}
	return toSerialize, nil
}

type NullableSchemaTlsCertificateType struct {
	value *SchemaTlsCertificateType
	isSet bool
}

func (v NullableSchemaTlsCertificateType) Get() *SchemaTlsCertificateType {
	return v.value
}

func (v *NullableSchemaTlsCertificateType) Set(val *SchemaTlsCertificateType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaTlsCertificateType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaTlsCertificateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaTlsCertificateType(val *SchemaTlsCertificateType) *NullableSchemaTlsCertificateType {
	return &NullableSchemaTlsCertificateType{value: val, isSet: true}
}

func (v NullableSchemaTlsCertificateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaTlsCertificateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


