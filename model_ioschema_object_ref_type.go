/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IoschemaObjectRefType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IoschemaObjectRefType{}

// IoschemaObjectRefType This type establishes a 'direct reference' from one object(the referrer) to another(the referred). Such a reference is in form of tenant/namespace/name for public API and Uid for private API This type of reference is called direct because the relation is explicit and concrete (as opposed to selector reference which builds a group based on labels of selectee objects)
type IoschemaObjectRefType struct {
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then kind will hold the referred object's kind (e.g. \"route\")  Example: ` \"virtual_site\"`
	Kind *string `json:"kind,omitempty"`
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then name will hold the referred object's(e.g. route's) name.  Example: ` \"contactus-route\"`
	Name *string `json:"name,omitempty"`
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then namespace will hold the referred object's(e.g. route's) namespace.  Example: ` \"ns1\"`
	Namespace *string `json:"namespace,omitempty"`
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then tenant will hold the referred object's(e.g. route's) tenant.  Example: ` \"acmecorp\"`
	Tenant *string `json:"tenant,omitempty"`
	//  When a configuration object(e.g. virtual_host) refers to another(e.g route)  then uid will hold the referred object's(e.g. route's) uid.  Example: ` \"d15f1fad-4d37-48c0-8706-df1824d76d31\"`
	Uid *string `json:"uid,omitempty"`
}

// NewIoschemaObjectRefType instantiates a new IoschemaObjectRefType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoschemaObjectRefType() *IoschemaObjectRefType {
	this := IoschemaObjectRefType{}
	return &this
}

// NewIoschemaObjectRefTypeWithDefaults instantiates a new IoschemaObjectRefType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoschemaObjectRefTypeWithDefaults() *IoschemaObjectRefType {
	this := IoschemaObjectRefType{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *IoschemaObjectRefType) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoschemaObjectRefType) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *IoschemaObjectRefType) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *IoschemaObjectRefType) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IoschemaObjectRefType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoschemaObjectRefType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IoschemaObjectRefType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IoschemaObjectRefType) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *IoschemaObjectRefType) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoschemaObjectRefType) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *IoschemaObjectRefType) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *IoschemaObjectRefType) SetNamespace(v string) {
	o.Namespace = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *IoschemaObjectRefType) GetTenant() string {
	if o == nil || IsNil(o.Tenant) {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoschemaObjectRefType) GetTenantOk() (*string, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *IoschemaObjectRefType) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *IoschemaObjectRefType) SetTenant(v string) {
	o.Tenant = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *IoschemaObjectRefType) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoschemaObjectRefType) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *IoschemaObjectRefType) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *IoschemaObjectRefType) SetUid(v string) {
	o.Uid = &v
}

func (o IoschemaObjectRefType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IoschemaObjectRefType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

type NullableIoschemaObjectRefType struct {
	value *IoschemaObjectRefType
	isSet bool
}

func (v NullableIoschemaObjectRefType) Get() *IoschemaObjectRefType {
	return v.value
}

func (v *NullableIoschemaObjectRefType) Set(val *IoschemaObjectRefType) {
	v.value = val
	v.isSet = true
}

func (v NullableIoschemaObjectRefType) IsSet() bool {
	return v.isSet
}

func (v *NullableIoschemaObjectRefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoschemaObjectRefType(val *IoschemaObjectRefType) *NullableIoschemaObjectRefType {
	return &NullableIoschemaObjectRefType{value: val, isSet: true}
}

func (v NullableIoschemaObjectRefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoschemaObjectRefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


