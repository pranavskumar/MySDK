/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OriginPoolDeleteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OriginPoolDeleteRequest{}

// OriginPoolDeleteRequest This is the input message of the 'Delete' RPC.
type OriginPoolDeleteRequest struct {
	//  Fail the delete operation if this object is being referred by other objects
	FailIfReferred *bool `json:"fail_if_referred,omitempty"`
	//  Name of the configuration object  Example: ` \"name\"`
	Name *string `json:"name,omitempty"`
	//  Namespace in which the configuration object is present  Example: ` \"ns1\"`
	Namespace *string `json:"namespace,omitempty"`
}

// NewOriginPoolDeleteRequest instantiates a new OriginPoolDeleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOriginPoolDeleteRequest() *OriginPoolDeleteRequest {
	this := OriginPoolDeleteRequest{}
	return &this
}

// NewOriginPoolDeleteRequestWithDefaults instantiates a new OriginPoolDeleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginPoolDeleteRequestWithDefaults() *OriginPoolDeleteRequest {
	this := OriginPoolDeleteRequest{}
	return &this
}

// GetFailIfReferred returns the FailIfReferred field value if set, zero value otherwise.
func (o *OriginPoolDeleteRequest) GetFailIfReferred() bool {
	if o == nil || IsNil(o.FailIfReferred) {
		var ret bool
		return ret
	}
	return *o.FailIfReferred
}

// GetFailIfReferredOk returns a tuple with the FailIfReferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolDeleteRequest) GetFailIfReferredOk() (*bool, bool) {
	if o == nil || IsNil(o.FailIfReferred) {
		return nil, false
	}
	return o.FailIfReferred, true
}

// HasFailIfReferred returns a boolean if a field has been set.
func (o *OriginPoolDeleteRequest) HasFailIfReferred() bool {
	if o != nil && !IsNil(o.FailIfReferred) {
		return true
	}

	return false
}

// SetFailIfReferred gets a reference to the given bool and assigns it to the FailIfReferred field.
func (o *OriginPoolDeleteRequest) SetFailIfReferred(v bool) {
	o.FailIfReferred = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OriginPoolDeleteRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolDeleteRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OriginPoolDeleteRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OriginPoolDeleteRequest) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *OriginPoolDeleteRequest) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginPoolDeleteRequest) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *OriginPoolDeleteRequest) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *OriginPoolDeleteRequest) SetNamespace(v string) {
	o.Namespace = &v
}

func (o OriginPoolDeleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OriginPoolDeleteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FailIfReferred) {
		toSerialize["fail_if_referred"] = o.FailIfReferred
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableOriginPoolDeleteRequest struct {
	value *OriginPoolDeleteRequest
	isSet bool
}

func (v NullableOriginPoolDeleteRequest) Get() *OriginPoolDeleteRequest {
	return v.value
}

func (v *NullableOriginPoolDeleteRequest) Set(val *OriginPoolDeleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginPoolDeleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginPoolDeleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginPoolDeleteRequest(val *OriginPoolDeleteRequest) *NullableOriginPoolDeleteRequest {
	return &NullableOriginPoolDeleteRequest{value: val, isSet: true}
}

func (v NullableOriginPoolDeleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginPoolDeleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


