/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaHeaderTransformationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaHeaderTransformationType{}

// SchemaHeaderTransformationType Header Transformation options for HTTP/1.1 request/response headers
type SchemaHeaderTransformationType struct {
	// This can be used for messages where no values are needed
	DefaultHeaderTransformation map[string]interface{} `json:"default_header_transformation,omitempty"`
	// This can be used for messages where no values are needed
	ProperCaseHeaderTransformation map[string]interface{} `json:"proper_case_header_transformation,omitempty"`
}

// NewSchemaHeaderTransformationType instantiates a new SchemaHeaderTransformationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaHeaderTransformationType() *SchemaHeaderTransformationType {
	this := SchemaHeaderTransformationType{}
	return &this
}

// NewSchemaHeaderTransformationTypeWithDefaults instantiates a new SchemaHeaderTransformationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaHeaderTransformationTypeWithDefaults() *SchemaHeaderTransformationType {
	this := SchemaHeaderTransformationType{}
	return &this
}

// GetDefaultHeaderTransformation returns the DefaultHeaderTransformation field value if set, zero value otherwise.
func (o *SchemaHeaderTransformationType) GetDefaultHeaderTransformation() map[string]interface{} {
	if o == nil || IsNil(o.DefaultHeaderTransformation) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultHeaderTransformation
}

// GetDefaultHeaderTransformationOk returns a tuple with the DefaultHeaderTransformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaHeaderTransformationType) GetDefaultHeaderTransformationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultHeaderTransformation) {
		return map[string]interface{}{}, false
	}
	return o.DefaultHeaderTransformation, true
}

// HasDefaultHeaderTransformation returns a boolean if a field has been set.
func (o *SchemaHeaderTransformationType) HasDefaultHeaderTransformation() bool {
	if o != nil && !IsNil(o.DefaultHeaderTransformation) {
		return true
	}

	return false
}

// SetDefaultHeaderTransformation gets a reference to the given map[string]interface{} and assigns it to the DefaultHeaderTransformation field.
func (o *SchemaHeaderTransformationType) SetDefaultHeaderTransformation(v map[string]interface{}) {
	o.DefaultHeaderTransformation = v
}

// GetProperCaseHeaderTransformation returns the ProperCaseHeaderTransformation field value if set, zero value otherwise.
func (o *SchemaHeaderTransformationType) GetProperCaseHeaderTransformation() map[string]interface{} {
	if o == nil || IsNil(o.ProperCaseHeaderTransformation) {
		var ret map[string]interface{}
		return ret
	}
	return o.ProperCaseHeaderTransformation
}

// GetProperCaseHeaderTransformationOk returns a tuple with the ProperCaseHeaderTransformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaHeaderTransformationType) GetProperCaseHeaderTransformationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ProperCaseHeaderTransformation) {
		return map[string]interface{}{}, false
	}
	return o.ProperCaseHeaderTransformation, true
}

// HasProperCaseHeaderTransformation returns a boolean if a field has been set.
func (o *SchemaHeaderTransformationType) HasProperCaseHeaderTransformation() bool {
	if o != nil && !IsNil(o.ProperCaseHeaderTransformation) {
		return true
	}

	return false
}

// SetProperCaseHeaderTransformation gets a reference to the given map[string]interface{} and assigns it to the ProperCaseHeaderTransformation field.
func (o *SchemaHeaderTransformationType) SetProperCaseHeaderTransformation(v map[string]interface{}) {
	o.ProperCaseHeaderTransformation = v
}

func (o SchemaHeaderTransformationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaHeaderTransformationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultHeaderTransformation) {
		toSerialize["default_header_transformation"] = o.DefaultHeaderTransformation
	}
	if !IsNil(o.ProperCaseHeaderTransformation) {
		toSerialize["proper_case_header_transformation"] = o.ProperCaseHeaderTransformation
	}
	return toSerialize, nil
}

type NullableSchemaHeaderTransformationType struct {
	value *SchemaHeaderTransformationType
	isSet bool
}

func (v NullableSchemaHeaderTransformationType) Get() *SchemaHeaderTransformationType {
	return v.value
}

func (v *NullableSchemaHeaderTransformationType) Set(val *SchemaHeaderTransformationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaHeaderTransformationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaHeaderTransformationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaHeaderTransformationType(val *SchemaHeaderTransformationType) *NullableSchemaHeaderTransformationType {
	return &NullableSchemaHeaderTransformationType{value: val, isSet: true}
}

func (v NullableSchemaHeaderTransformationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaHeaderTransformationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


