/*
F5 Distributed Cloud Services API for ves.io.schema.views.origin_pool

Origin pool is a view to create cluster and endpoints that can be used in HTTP loadbalancer or TCP loadbalancer  It will create following child objects  * cluster * endpoints * healthcheck

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ViewsTlsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewsTlsConfig{}

// ViewsTlsConfig This defines various options to configure TLS configuration parameters
type ViewsTlsConfig struct {
	CustomSecurity *ViewsCustomCiphers `json:"custom_security,omitempty"`
	// This can be used for messages where no values are needed
	DefaultSecurity map[string]interface{} `json:"default_security,omitempty"`
	// This can be used for messages where no values are needed
	LowSecurity map[string]interface{} `json:"low_security,omitempty"`
	// This can be used for messages where no values are needed
	MediumSecurity map[string]interface{} `json:"medium_security,omitempty"`
}

// NewViewsTlsConfig instantiates a new ViewsTlsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewsTlsConfig() *ViewsTlsConfig {
	this := ViewsTlsConfig{}
	return &this
}

// NewViewsTlsConfigWithDefaults instantiates a new ViewsTlsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewsTlsConfigWithDefaults() *ViewsTlsConfig {
	this := ViewsTlsConfig{}
	return &this
}

// GetCustomSecurity returns the CustomSecurity field value if set, zero value otherwise.
func (o *ViewsTlsConfig) GetCustomSecurity() ViewsCustomCiphers {
	if o == nil || IsNil(o.CustomSecurity) {
		var ret ViewsCustomCiphers
		return ret
	}
	return *o.CustomSecurity
}

// GetCustomSecurityOk returns a tuple with the CustomSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewsTlsConfig) GetCustomSecurityOk() (*ViewsCustomCiphers, bool) {
	if o == nil || IsNil(o.CustomSecurity) {
		return nil, false
	}
	return o.CustomSecurity, true
}

// HasCustomSecurity returns a boolean if a field has been set.
func (o *ViewsTlsConfig) HasCustomSecurity() bool {
	if o != nil && !IsNil(o.CustomSecurity) {
		return true
	}

	return false
}

// SetCustomSecurity gets a reference to the given ViewsCustomCiphers and assigns it to the CustomSecurity field.
func (o *ViewsTlsConfig) SetCustomSecurity(v ViewsCustomCiphers) {
	o.CustomSecurity = &v
}

// GetDefaultSecurity returns the DefaultSecurity field value if set, zero value otherwise.
func (o *ViewsTlsConfig) GetDefaultSecurity() map[string]interface{} {
	if o == nil || IsNil(o.DefaultSecurity) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultSecurity
}

// GetDefaultSecurityOk returns a tuple with the DefaultSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewsTlsConfig) GetDefaultSecurityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultSecurity) {
		return map[string]interface{}{}, false
	}
	return o.DefaultSecurity, true
}

// HasDefaultSecurity returns a boolean if a field has been set.
func (o *ViewsTlsConfig) HasDefaultSecurity() bool {
	if o != nil && !IsNil(o.DefaultSecurity) {
		return true
	}

	return false
}

// SetDefaultSecurity gets a reference to the given map[string]interface{} and assigns it to the DefaultSecurity field.
func (o *ViewsTlsConfig) SetDefaultSecurity(v map[string]interface{}) {
	o.DefaultSecurity = v
}

// GetLowSecurity returns the LowSecurity field value if set, zero value otherwise.
func (o *ViewsTlsConfig) GetLowSecurity() map[string]interface{} {
	if o == nil || IsNil(o.LowSecurity) {
		var ret map[string]interface{}
		return ret
	}
	return o.LowSecurity
}

// GetLowSecurityOk returns a tuple with the LowSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewsTlsConfig) GetLowSecurityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LowSecurity) {
		return map[string]interface{}{}, false
	}
	return o.LowSecurity, true
}

// HasLowSecurity returns a boolean if a field has been set.
func (o *ViewsTlsConfig) HasLowSecurity() bool {
	if o != nil && !IsNil(o.LowSecurity) {
		return true
	}

	return false
}

// SetLowSecurity gets a reference to the given map[string]interface{} and assigns it to the LowSecurity field.
func (o *ViewsTlsConfig) SetLowSecurity(v map[string]interface{}) {
	o.LowSecurity = v
}

// GetMediumSecurity returns the MediumSecurity field value if set, zero value otherwise.
func (o *ViewsTlsConfig) GetMediumSecurity() map[string]interface{} {
	if o == nil || IsNil(o.MediumSecurity) {
		var ret map[string]interface{}
		return ret
	}
	return o.MediumSecurity
}

// GetMediumSecurityOk returns a tuple with the MediumSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewsTlsConfig) GetMediumSecurityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MediumSecurity) {
		return map[string]interface{}{}, false
	}
	return o.MediumSecurity, true
}

// HasMediumSecurity returns a boolean if a field has been set.
func (o *ViewsTlsConfig) HasMediumSecurity() bool {
	if o != nil && !IsNil(o.MediumSecurity) {
		return true
	}

	return false
}

// SetMediumSecurity gets a reference to the given map[string]interface{} and assigns it to the MediumSecurity field.
func (o *ViewsTlsConfig) SetMediumSecurity(v map[string]interface{}) {
	o.MediumSecurity = v
}

func (o ViewsTlsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewsTlsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomSecurity) {
		toSerialize["custom_security"] = o.CustomSecurity
	}
	if !IsNil(o.DefaultSecurity) {
		toSerialize["default_security"] = o.DefaultSecurity
	}
	if !IsNil(o.LowSecurity) {
		toSerialize["low_security"] = o.LowSecurity
	}
	if !IsNil(o.MediumSecurity) {
		toSerialize["medium_security"] = o.MediumSecurity
	}
	return toSerialize, nil
}

type NullableViewsTlsConfig struct {
	value *ViewsTlsConfig
	isSet bool
}

func (v NullableViewsTlsConfig) Get() *ViewsTlsConfig {
	return v.value
}

func (v *NullableViewsTlsConfig) Set(val *ViewsTlsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableViewsTlsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableViewsTlsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewsTlsConfig(val *ViewsTlsConfig) *NullableViewsTlsConfig {
	return &NullableViewsTlsConfig{value: val, isSet: true}
}

func (v NullableViewsTlsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewsTlsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


